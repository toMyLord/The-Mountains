// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameContent.proto

#include "GameContent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class PlayerOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerOperation> _instance;
} _PlayerOperation_default_instance_;
class RoomInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoomInfo> _instance;
} _RoomInfo_default_instance_;
class OtherPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherPlayerInfo> _instance;
} _OtherPlayerInfo_default_instance_;
class LocalPlayerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalPlayerInfo> _instance;
} _LocalPlayerInfo_default_instance_;
class GameFinishDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameFinish> _instance;
} _GameFinish_default_instance_;
class CandleCardFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandleCardFeedback> _instance;
} _CandleCardFeedback_default_instance_;
static void InitDefaultsscc_info_CandleCardFeedback_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CandleCardFeedback_default_instance_;
    new (ptr) ::CandleCardFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CandleCardFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CandleCardFeedback_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CandleCardFeedback_GameContent_2eproto}, {}};

static void InitDefaultsscc_info_GameFinish_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameFinish_default_instance_;
    new (ptr) ::GameFinish();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameFinish::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameFinish_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameFinish_GameContent_2eproto}, {}};

static void InitDefaultsscc_info_LocalPlayerInfo_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LocalPlayerInfo_default_instance_;
    new (ptr) ::LocalPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LocalPlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalPlayerInfo_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalPlayerInfo_GameContent_2eproto}, {}};

static void InitDefaultsscc_info_OtherPlayerInfo_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OtherPlayerInfo_default_instance_;
    new (ptr) ::OtherPlayerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OtherPlayerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherPlayerInfo_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherPlayerInfo_GameContent_2eproto}, {}};

static void InitDefaultsscc_info_PlayerOperation_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PlayerOperation_default_instance_;
    new (ptr) ::PlayerOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PlayerOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerOperation_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerOperation_GameContent_2eproto}, {}};

static void InitDefaultsscc_info_RoomInfo_GameContent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RoomInfo_default_instance_;
    new (ptr) ::RoomInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RoomInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfo_GameContent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoomInfo_GameContent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GameContent_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_GameContent_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GameContent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GameContent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PlayerOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PlayerOperation, seatnum_),
  PROTOBUF_FIELD_OFFSET(::PlayerOperation, operation_),
  PROTOBUF_FIELD_OFFSET(::PlayerOperation, card_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RoomInfo, roomid_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, time_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, playernum_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, candlenum_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, woodnum_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, fognum_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, witchnum_),
  PROTOBUF_FIELD_OFFSET(::RoomInfo, curroperationplayernum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, name_),
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, seatnum_),
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, cardnum_),
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, witchnum_),
  PROTOBUF_FIELD_OFFSET(::OtherPlayerInfo, currplayerstatus_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, cardnum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, waternum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, firenum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, lightnum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, candlenum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, woodnum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, fognum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, witchnum_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, currplayerstatus_),
  PROTOBUF_FIELD_OFFSET(::LocalPlayerInfo, seatnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameFinish, seatnum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, waternum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, firenum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, lightnum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, candlenum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, woodnum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, fognum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, witchnum_),
  PROTOBUF_FIELD_OFFSET(::GameFinish, gamescore_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, waternum_),
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, firenum_),
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, lightnum_),
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, candlenum_),
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, woodnum_),
  PROTOBUF_FIELD_OFFSET(::CandleCardFeedback, fognum_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PlayerOperation)},
  { 8, -1, sizeof(::RoomInfo)},
  { 21, -1, sizeof(::OtherPlayerInfo)},
  { 32, -1, sizeof(::LocalPlayerInfo)},
  { 47, -1, sizeof(::GameFinish)},
  { 61, -1, sizeof(::CandleCardFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PlayerOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RoomInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_OtherPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LocalPlayerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameFinish_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CandleCardFeedback_default_instance_),
};

const char descriptor_table_protodef_GameContent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021GameContent.proto\"\212\002\n\017PlayerOperation\022"
  "\017\n\007seatNum\030\001 \001(\005\0221\n\toperation\030\002 \001(\0162\036.Pl"
  "ayerOperation.OperationType\022\'\n\004card\030\003 \001("
  "\0162\031.PlayerOperation.CardType\"4\n\rOperatio"
  "nType\022\014\n\010Compound\020\000\022\014\n\010Transfer\020\001\022\007\n\003Use"
  "\020\002\"T\n\010CardType\022\t\n\005Water\020\000\022\010\n\004Fire\020\001\022\t\n\005L"
  "ight\020\002\022\n\n\006Candle\020\003\022\010\n\004Wood\020\004\022\007\n\003Fog\020\005\022\t\n"
  "\005Witch\020\006\"\241\001\n\010RoomInfo\022\016\n\006roomID\030\001 \001(\005\022\014\n"
  "\004time\030\002 \001(\005\022\021\n\tplayerNum\030\003 \001(\005\022\021\n\tcandle"
  "Num\030\004 \001(\005\022\017\n\007woodNum\030\005 \001(\005\022\016\n\006fogNum\030\006 \001"
  "(\005\022\020\n\010witchNum\030\007 \001(\005\022\036\n\026currOperationPla"
  "yerNum\030\010 \001(\005\"\312\001\n\017OtherPlayerInfo\022\014\n\004name"
  "\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\022\017\n\007seatNum\030\003 \001(\005\022\017"
  "\n\007cardNum\030\004 \001(\005\022\020\n\010witchNum\030\005 \001(\005\0227\n\020Cur"
  "rPlayerStatus\030\006 \001(\0162\035.OtherPlayerInfo.Pl"
  "ayerStatus\"-\n\014PlayerStatus\022\n\n\006Normal\020\000\022\010"
  "\n\004Wood\020\001\022\007\n\003Fog\020\002\"\226\002\n\017LocalPlayerInfo\022\017\n"
  "\007cardNum\030\001 \001(\005\022\020\n\010waterNum\030\002 \001(\005\022\017\n\007fire"
  "Num\030\003 \001(\005\022\020\n\010lightNum\030\004 \001(\005\022\021\n\tcandleNum"
  "\030\005 \001(\005\022\017\n\007woodNum\030\006 \001(\005\022\016\n\006fogNum\030\007 \001(\005\022"
  "\020\n\010witchNum\030\010 \001(\005\0227\n\020CurrPlayerStatus\030\t "
  "\001(\0162\035.LocalPlayerInfo.PlayerStatus\022\017\n\007se"
  "atNum\030\n \001(\005\"-\n\014PlayerStatus\022\n\n\006Normal\020\000\022"
  "\010\n\004Wood\020\001\022\007\n\003Fog\020\002\"\253\001\n\nGameFinish\022\017\n\007sea"
  "tNum\030\001 \001(\005\022\020\n\010waterNum\030\002 \001(\005\022\017\n\007fireNum\030"
  "\003 \001(\005\022\020\n\010lightNum\030\004 \001(\005\022\021\n\tcandleNum\030\005 \001"
  "(\005\022\017\n\007woodNum\030\006 \001(\005\022\016\n\006fogNum\030\007 \001(\005\022\020\n\010w"
  "itchNum\030\010 \001(\005\022\021\n\tgameScore\030\t \001(\005\"}\n\022Cand"
  "leCardFeedback\022\020\n\010waterNum\030\001 \001(\005\022\017\n\007fire"
  "Num\030\002 \001(\005\022\020\n\010lightNum\030\003 \001(\005\022\021\n\tcandleNum"
  "\030\004 \001(\005\022\017\n\007woodNum\030\005 \001(\005\022\016\n\006fogNum\030\006 \001(\005b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GameContent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GameContent_2eproto_sccs[6] = {
  &scc_info_CandleCardFeedback_GameContent_2eproto.base,
  &scc_info_GameFinish_GameContent_2eproto.base,
  &scc_info_LocalPlayerInfo_GameContent_2eproto.base,
  &scc_info_OtherPlayerInfo_GameContent_2eproto.base,
  &scc_info_PlayerOperation_GameContent_2eproto.base,
  &scc_info_RoomInfo_GameContent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GameContent_2eproto_once;
static bool descriptor_table_GameContent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameContent_2eproto = {
  &descriptor_table_GameContent_2eproto_initialized, descriptor_table_protodef_GameContent_2eproto, "GameContent.proto", 1247,
  &descriptor_table_GameContent_2eproto_once, descriptor_table_GameContent_2eproto_sccs, descriptor_table_GameContent_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_GameContent_2eproto::offsets,
  file_level_metadata_GameContent_2eproto, 6, file_level_enum_descriptors_GameContent_2eproto, file_level_service_descriptors_GameContent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameContent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GameContent_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerOperation_OperationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameContent_2eproto);
  return file_level_enum_descriptors_GameContent_2eproto[0];
}
bool PlayerOperation_OperationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerOperation_OperationType PlayerOperation::Compound;
constexpr PlayerOperation_OperationType PlayerOperation::Transfer;
constexpr PlayerOperation_OperationType PlayerOperation::Use;
constexpr PlayerOperation_OperationType PlayerOperation::OperationType_MIN;
constexpr PlayerOperation_OperationType PlayerOperation::OperationType_MAX;
constexpr int PlayerOperation::OperationType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerOperation_CardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameContent_2eproto);
  return file_level_enum_descriptors_GameContent_2eproto[1];
}
bool PlayerOperation_CardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayerOperation_CardType PlayerOperation::Water;
constexpr PlayerOperation_CardType PlayerOperation::Fire;
constexpr PlayerOperation_CardType PlayerOperation::Light;
constexpr PlayerOperation_CardType PlayerOperation::Candle;
constexpr PlayerOperation_CardType PlayerOperation::Wood;
constexpr PlayerOperation_CardType PlayerOperation::Fog;
constexpr PlayerOperation_CardType PlayerOperation::Witch;
constexpr PlayerOperation_CardType PlayerOperation::CardType_MIN;
constexpr PlayerOperation_CardType PlayerOperation::CardType_MAX;
constexpr int PlayerOperation::CardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OtherPlayerInfo_PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameContent_2eproto);
  return file_level_enum_descriptors_GameContent_2eproto[2];
}
bool OtherPlayerInfo_PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo::Normal;
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo::Wood;
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo::Fog;
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo::PlayerStatus_MIN;
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo::PlayerStatus_MAX;
constexpr int OtherPlayerInfo::PlayerStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalPlayerInfo_PlayerStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameContent_2eproto);
  return file_level_enum_descriptors_GameContent_2eproto[3];
}
bool LocalPlayerInfo_PlayerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo::Normal;
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo::Wood;
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo::Fog;
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo::PlayerStatus_MIN;
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo::PlayerStatus_MAX;
constexpr int LocalPlayerInfo::PlayerStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PlayerOperation::InitAsDefaultInstance() {
}
class PlayerOperation::_Internal {
 public:
};

PlayerOperation::PlayerOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PlayerOperation)
}
PlayerOperation::PlayerOperation(const PlayerOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seatnum_, &from.seatnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_) -
    reinterpret_cast<char*>(&seatnum_)) + sizeof(card_));
  // @@protoc_insertion_point(copy_constructor:PlayerOperation)
}

void PlayerOperation::SharedCtor() {
  ::memset(&seatnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&seatnum_)) + sizeof(card_));
}

PlayerOperation::~PlayerOperation() {
  // @@protoc_insertion_point(destructor:PlayerOperation)
  SharedDtor();
}

void PlayerOperation::SharedDtor() {
}

void PlayerOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerOperation& PlayerOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerOperation_GameContent_2eproto.base);
  return *internal_default_instance();
}


void PlayerOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:PlayerOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seatnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&seatnum_)) + sizeof(card_));
  _internal_metadata_.Clear();
}

const char* PlayerOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seatNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seatnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PlayerOperation.OperationType operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::PlayerOperation_OperationType>(val));
        } else goto handle_unusual;
        continue;
      // .PlayerOperation.CardType card = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_card(static_cast<::PlayerOperation_CardType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PlayerOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatNum = 1;
  if (this->seatnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatnum(), target);
  }

  // .PlayerOperation.OperationType operation = 2;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // .PlayerOperation.CardType card = 3;
  if (this->card() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_card(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PlayerOperation)
  return target;
}

size_t PlayerOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PlayerOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatNum = 1;
  if (this->seatnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seatnum());
  }

  // .PlayerOperation.OperationType operation = 2;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  // .PlayerOperation.CardType card = 3;
  if (this->card() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_card());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PlayerOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PlayerOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PlayerOperation)
    MergeFrom(*source);
  }
}

void PlayerOperation::MergeFrom(const PlayerOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PlayerOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seatnum() != 0) {
    _internal_set_seatnum(from._internal_seatnum());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
  if (from.card() != 0) {
    _internal_set_card(from._internal_card());
  }
}

void PlayerOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PlayerOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerOperation::CopyFrom(const PlayerOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PlayerOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerOperation::IsInitialized() const {
  return true;
}

void PlayerOperation::InternalSwap(PlayerOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seatnum_, other->seatnum_);
  swap(operation_, other->operation_);
  swap(card_, other->card_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoomInfo::InitAsDefaultInstance() {
}
class RoomInfo::_Internal {
 public:
};

RoomInfo::RoomInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roomid_, &from.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&curroperationplayernum_) -
    reinterpret_cast<char*>(&roomid_)) + sizeof(curroperationplayernum_));
  // @@protoc_insertion_point(copy_constructor:RoomInfo)
}

void RoomInfo::SharedCtor() {
  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curroperationplayernum_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(curroperationplayernum_));
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
}

void RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoomInfo& RoomInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoomInfo_GameContent_2eproto.base);
  return *internal_default_instance();
}


void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curroperationplayernum_) -
      reinterpret_cast<char*>(&roomid_)) + sizeof(curroperationplayernum_));
  _internal_metadata_.Clear();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 roomID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candleNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          candlenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 woodNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          woodnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fogNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fognum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witchNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          witchnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currOperationPlayerNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          curroperationplayernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomID = 1;
  if (this->roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // int32 time = 2;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_time(), target);
  }

  // int32 playerNum = 3;
  if (this->playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_playernum(), target);
  }

  // int32 candleNum = 4;
  if (this->candlenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_candlenum(), target);
  }

  // int32 woodNum = 5;
  if (this->woodnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_woodnum(), target);
  }

  // int32 fogNum = 6;
  if (this->fognum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_fognum(), target);
  }

  // int32 witchNum = 7;
  if (this->witchnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_witchnum(), target);
  }

  // int32 currOperationPlayerNum = 8;
  if (this->curroperationplayernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_curroperationplayernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomID = 1;
  if (this->roomid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_roomid());
  }

  // int32 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  // int32 playerNum = 3;
  if (this->playernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playernum());
  }

  // int32 candleNum = 4;
  if (this->candlenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candlenum());
  }

  // int32 woodNum = 5;
  if (this->woodnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_woodnum());
  }

  // int32 fogNum = 6;
  if (this->fognum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fognum());
  }

  // int32 witchNum = 7;
  if (this->witchnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witchnum());
  }

  // int32 currOperationPlayerNum = 8;
  if (this->curroperationplayernum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_curroperationplayernum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoomInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RoomInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.roomid() != 0) {
    _internal_set_roomid(from._internal_roomid());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.playernum() != 0) {
    _internal_set_playernum(from._internal_playernum());
  }
  if (from.candlenum() != 0) {
    _internal_set_candlenum(from._internal_candlenum());
  }
  if (from.woodnum() != 0) {
    _internal_set_woodnum(from._internal_woodnum());
  }
  if (from.fognum() != 0) {
    _internal_set_fognum(from._internal_fognum());
  }
  if (from.witchnum() != 0) {
    _internal_set_witchnum(from._internal_witchnum());
  }
  if (from.curroperationplayernum() != 0) {
    _internal_set_curroperationplayernum(from._internal_curroperationplayernum());
  }
}

void RoomInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roomid_, other->roomid_);
  swap(time_, other->time_);
  swap(playernum_, other->playernum_);
  swap(candlenum_, other->candlenum_);
  swap(woodnum_, other->woodnum_);
  swap(fognum_, other->fognum_);
  swap(witchnum_, other->witchnum_);
  swap(curroperationplayernum_, other->curroperationplayernum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherPlayerInfo::InitAsDefaultInstance() {
}
class OtherPlayerInfo::_Internal {
 public:
};

OtherPlayerInfo::OtherPlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:OtherPlayerInfo)
}
OtherPlayerInfo::OtherPlayerInfo(const OtherPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&currplayerstatus_) -
    reinterpret_cast<char*>(&score_)) + sizeof(currplayerstatus_));
  // @@protoc_insertion_point(copy_constructor:OtherPlayerInfo)
}

void OtherPlayerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OtherPlayerInfo_GameContent_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currplayerstatus_) -
      reinterpret_cast<char*>(&score_)) + sizeof(currplayerstatus_));
}

OtherPlayerInfo::~OtherPlayerInfo() {
  // @@protoc_insertion_point(destructor:OtherPlayerInfo)
  SharedDtor();
}

void OtherPlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OtherPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherPlayerInfo& OtherPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherPlayerInfo_GameContent_2eproto.base);
  return *internal_default_instance();
}


void OtherPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currplayerstatus_) -
      reinterpret_cast<char*>(&score_)) + sizeof(currplayerstatus_));
  _internal_metadata_.Clear();
}

const char* OtherPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "OtherPlayerInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seatNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seatnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cardNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witchNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          witchnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .OtherPlayerInfo.PlayerStatus CurrPlayerStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_currplayerstatus(static_cast<::OtherPlayerInfo_PlayerStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OtherPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "OtherPlayerInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 score = 2;
  if (this->score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // int32 seatNum = 3;
  if (this->seatnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_seatnum(), target);
  }

  // int32 cardNum = 4;
  if (this->cardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cardnum(), target);
  }

  // int32 witchNum = 5;
  if (this->witchnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_witchnum(), target);
  }

  // .OtherPlayerInfo.PlayerStatus CurrPlayerStatus = 6;
  if (this->currplayerstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_currplayerstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherPlayerInfo)
  return target;
}

size_t OtherPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_score());
  }

  // int32 seatNum = 3;
  if (this->seatnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seatnum());
  }

  // int32 cardNum = 4;
  if (this->cardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardnum());
  }

  // int32 witchNum = 5;
  if (this->witchnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witchnum());
  }

  // .OtherPlayerInfo.PlayerStatus CurrPlayerStatus = 6;
  if (this->currplayerstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currplayerstatus());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OtherPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OtherPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OtherPlayerInfo)
    MergeFrom(*source);
  }
}

void OtherPlayerInfo::MergeFrom(const OtherPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.score() != 0) {
    _internal_set_score(from._internal_score());
  }
  if (from.seatnum() != 0) {
    _internal_set_seatnum(from._internal_seatnum());
  }
  if (from.cardnum() != 0) {
    _internal_set_cardnum(from._internal_cardnum());
  }
  if (from.witchnum() != 0) {
    _internal_set_witchnum(from._internal_witchnum());
  }
  if (from.currplayerstatus() != 0) {
    _internal_set_currplayerstatus(from._internal_currplayerstatus());
  }
}

void OtherPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OtherPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherPlayerInfo::CopyFrom(const OtherPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherPlayerInfo::IsInitialized() const {
  return true;
}

void OtherPlayerInfo::InternalSwap(OtherPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(score_, other->score_);
  swap(seatnum_, other->seatnum_);
  swap(cardnum_, other->cardnum_);
  swap(witchnum_, other->witchnum_);
  swap(currplayerstatus_, other->currplayerstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalPlayerInfo::InitAsDefaultInstance() {
}
class LocalPlayerInfo::_Internal {
 public:
};

LocalPlayerInfo::LocalPlayerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LocalPlayerInfo)
}
LocalPlayerInfo::LocalPlayerInfo(const LocalPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cardnum_, &from.cardnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&seatnum_) -
    reinterpret_cast<char*>(&cardnum_)) + sizeof(seatnum_));
  // @@protoc_insertion_point(copy_constructor:LocalPlayerInfo)
}

void LocalPlayerInfo::SharedCtor() {
  ::memset(&cardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seatnum_) -
      reinterpret_cast<char*>(&cardnum_)) + sizeof(seatnum_));
}

LocalPlayerInfo::~LocalPlayerInfo() {
  // @@protoc_insertion_point(destructor:LocalPlayerInfo)
  SharedDtor();
}

void LocalPlayerInfo::SharedDtor() {
}

void LocalPlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPlayerInfo& LocalPlayerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalPlayerInfo_GameContent_2eproto.base);
  return *internal_default_instance();
}


void LocalPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:LocalPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cardnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seatnum_) -
      reinterpret_cast<char*>(&cardnum_)) + sizeof(seatnum_));
  _internal_metadata_.Clear();
}

const char* LocalPlayerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cardNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cardnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 waterNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fireNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          firenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lightNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lightnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candleNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          candlenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 woodNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          woodnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fogNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fognum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witchNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witchnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LocalPlayerInfo.PlayerStatus CurrPlayerStatus = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_currplayerstatus(static_cast<::LocalPlayerInfo_PlayerStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 seatNum = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          seatnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalPlayerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LocalPlayerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cardNum = 1;
  if (this->cardnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cardnum(), target);
  }

  // int32 waterNum = 2;
  if (this->waternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_waternum(), target);
  }

  // int32 fireNum = 3;
  if (this->firenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_firenum(), target);
  }

  // int32 lightNum = 4;
  if (this->lightnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lightnum(), target);
  }

  // int32 candleNum = 5;
  if (this->candlenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_candlenum(), target);
  }

  // int32 woodNum = 6;
  if (this->woodnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_woodnum(), target);
  }

  // int32 fogNum = 7;
  if (this->fognum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fognum(), target);
  }

  // int32 witchNum = 8;
  if (this->witchnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_witchnum(), target);
  }

  // .LocalPlayerInfo.PlayerStatus CurrPlayerStatus = 9;
  if (this->currplayerstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_currplayerstatus(), target);
  }

  // int32 seatNum = 10;
  if (this->seatnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_seatnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocalPlayerInfo)
  return target;
}

size_t LocalPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocalPlayerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 cardNum = 1;
  if (this->cardnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cardnum());
  }

  // int32 waterNum = 2;
  if (this->waternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waternum());
  }

  // int32 fireNum = 3;
  if (this->firenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_firenum());
  }

  // int32 lightNum = 4;
  if (this->lightnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lightnum());
  }

  // int32 candleNum = 5;
  if (this->candlenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candlenum());
  }

  // int32 woodNum = 6;
  if (this->woodnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_woodnum());
  }

  // int32 fogNum = 7;
  if (this->fognum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fognum());
  }

  // int32 witchNum = 8;
  if (this->witchnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witchnum());
  }

  // .LocalPlayerInfo.PlayerStatus CurrPlayerStatus = 9;
  if (this->currplayerstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_currplayerstatus());
  }

  // int32 seatNum = 10;
  if (this->seatnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seatnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPlayerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LocalPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPlayerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalPlayerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LocalPlayerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LocalPlayerInfo)
    MergeFrom(*source);
  }
}

void LocalPlayerInfo::MergeFrom(const LocalPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LocalPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cardnum() != 0) {
    _internal_set_cardnum(from._internal_cardnum());
  }
  if (from.waternum() != 0) {
    _internal_set_waternum(from._internal_waternum());
  }
  if (from.firenum() != 0) {
    _internal_set_firenum(from._internal_firenum());
  }
  if (from.lightnum() != 0) {
    _internal_set_lightnum(from._internal_lightnum());
  }
  if (from.candlenum() != 0) {
    _internal_set_candlenum(from._internal_candlenum());
  }
  if (from.woodnum() != 0) {
    _internal_set_woodnum(from._internal_woodnum());
  }
  if (from.fognum() != 0) {
    _internal_set_fognum(from._internal_fognum());
  }
  if (from.witchnum() != 0) {
    _internal_set_witchnum(from._internal_witchnum());
  }
  if (from.currplayerstatus() != 0) {
    _internal_set_currplayerstatus(from._internal_currplayerstatus());
  }
  if (from.seatnum() != 0) {
    _internal_set_seatnum(from._internal_seatnum());
  }
}

void LocalPlayerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LocalPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPlayerInfo::CopyFrom(const LocalPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocalPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPlayerInfo::IsInitialized() const {
  return true;
}

void LocalPlayerInfo::InternalSwap(LocalPlayerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cardnum_, other->cardnum_);
  swap(waternum_, other->waternum_);
  swap(firenum_, other->firenum_);
  swap(lightnum_, other->lightnum_);
  swap(candlenum_, other->candlenum_);
  swap(woodnum_, other->woodnum_);
  swap(fognum_, other->fognum_);
  swap(witchnum_, other->witchnum_);
  swap(currplayerstatus_, other->currplayerstatus_);
  swap(seatnum_, other->seatnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalPlayerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameFinish::InitAsDefaultInstance() {
}
class GameFinish::_Internal {
 public:
};

GameFinish::GameFinish()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameFinish)
}
GameFinish::GameFinish(const GameFinish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seatnum_, &from.seatnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamescore_) -
    reinterpret_cast<char*>(&seatnum_)) + sizeof(gamescore_));
  // @@protoc_insertion_point(copy_constructor:GameFinish)
}

void GameFinish::SharedCtor() {
  ::memset(&seatnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamescore_) -
      reinterpret_cast<char*>(&seatnum_)) + sizeof(gamescore_));
}

GameFinish::~GameFinish() {
  // @@protoc_insertion_point(destructor:GameFinish)
  SharedDtor();
}

void GameFinish::SharedDtor() {
}

void GameFinish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameFinish& GameFinish::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameFinish_GameContent_2eproto.base);
  return *internal_default_instance();
}


void GameFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:GameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seatnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamescore_) -
      reinterpret_cast<char*>(&seatnum_)) + sizeof(gamescore_));
  _internal_metadata_.Clear();
}

const char* GameFinish::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seatNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seatnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 waterNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          waternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fireNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          firenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lightNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lightnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candleNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          candlenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 woodNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          woodnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fogNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fognum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 witchNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witchnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gameScore = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gamescore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameFinish::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameFinish)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seatNum = 1;
  if (this->seatnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seatnum(), target);
  }

  // int32 waterNum = 2;
  if (this->waternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_waternum(), target);
  }

  // int32 fireNum = 3;
  if (this->firenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_firenum(), target);
  }

  // int32 lightNum = 4;
  if (this->lightnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lightnum(), target);
  }

  // int32 candleNum = 5;
  if (this->candlenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_candlenum(), target);
  }

  // int32 woodNum = 6;
  if (this->woodnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_woodnum(), target);
  }

  // int32 fogNum = 7;
  if (this->fognum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fognum(), target);
  }

  // int32 witchNum = 8;
  if (this->witchnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_witchnum(), target);
  }

  // int32 gameScore = 9;
  if (this->gamescore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_gamescore(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameFinish)
  return target;
}

size_t GameFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameFinish)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seatNum = 1;
  if (this->seatnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seatnum());
  }

  // int32 waterNum = 2;
  if (this->waternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waternum());
  }

  // int32 fireNum = 3;
  if (this->firenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_firenum());
  }

  // int32 lightNum = 4;
  if (this->lightnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lightnum());
  }

  // int32 candleNum = 5;
  if (this->candlenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candlenum());
  }

  // int32 woodNum = 6;
  if (this->woodnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_woodnum());
  }

  // int32 fogNum = 7;
  if (this->fognum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fognum());
  }

  // int32 witchNum = 8;
  if (this->witchnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_witchnum());
  }

  // int32 gameScore = 9;
  if (this->gamescore() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gamescore());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameFinish::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const GameFinish* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameFinish>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameFinish)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameFinish)
    MergeFrom(*source);
  }
}

void GameFinish::MergeFrom(const GameFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seatnum() != 0) {
    _internal_set_seatnum(from._internal_seatnum());
  }
  if (from.waternum() != 0) {
    _internal_set_waternum(from._internal_waternum());
  }
  if (from.firenum() != 0) {
    _internal_set_firenum(from._internal_firenum());
  }
  if (from.lightnum() != 0) {
    _internal_set_lightnum(from._internal_lightnum());
  }
  if (from.candlenum() != 0) {
    _internal_set_candlenum(from._internal_candlenum());
  }
  if (from.woodnum() != 0) {
    _internal_set_woodnum(from._internal_woodnum());
  }
  if (from.fognum() != 0) {
    _internal_set_fognum(from._internal_fognum());
  }
  if (from.witchnum() != 0) {
    _internal_set_witchnum(from._internal_witchnum());
  }
  if (from.gamescore() != 0) {
    _internal_set_gamescore(from._internal_gamescore());
  }
}

void GameFinish::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameFinish::CopyFrom(const GameFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFinish::IsInitialized() const {
  return true;
}

void GameFinish::InternalSwap(GameFinish* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seatnum_, other->seatnum_);
  swap(waternum_, other->waternum_);
  swap(firenum_, other->firenum_);
  swap(lightnum_, other->lightnum_);
  swap(candlenum_, other->candlenum_);
  swap(woodnum_, other->woodnum_);
  swap(fognum_, other->fognum_);
  swap(witchnum_, other->witchnum_);
  swap(gamescore_, other->gamescore_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFinish::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CandleCardFeedback::InitAsDefaultInstance() {
}
class CandleCardFeedback::_Internal {
 public:
};

CandleCardFeedback::CandleCardFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CandleCardFeedback)
}
CandleCardFeedback::CandleCardFeedback(const CandleCardFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&waternum_, &from.waternum_,
    static_cast<size_t>(reinterpret_cast<char*>(&fognum_) -
    reinterpret_cast<char*>(&waternum_)) + sizeof(fognum_));
  // @@protoc_insertion_point(copy_constructor:CandleCardFeedback)
}

void CandleCardFeedback::SharedCtor() {
  ::memset(&waternum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fognum_) -
      reinterpret_cast<char*>(&waternum_)) + sizeof(fognum_));
}

CandleCardFeedback::~CandleCardFeedback() {
  // @@protoc_insertion_point(destructor:CandleCardFeedback)
  SharedDtor();
}

void CandleCardFeedback::SharedDtor() {
}

void CandleCardFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandleCardFeedback& CandleCardFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandleCardFeedback_GameContent_2eproto.base);
  return *internal_default_instance();
}


void CandleCardFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:CandleCardFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&waternum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fognum_) -
      reinterpret_cast<char*>(&waternum_)) + sizeof(fognum_));
  _internal_metadata_.Clear();
}

const char* CandleCardFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 waterNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          waternum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fireNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          firenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lightNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lightnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 candleNum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          candlenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 woodNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          woodnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fogNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fognum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CandleCardFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CandleCardFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 waterNum = 1;
  if (this->waternum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_waternum(), target);
  }

  // int32 fireNum = 2;
  if (this->firenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_firenum(), target);
  }

  // int32 lightNum = 3;
  if (this->lightnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lightnum(), target);
  }

  // int32 candleNum = 4;
  if (this->candlenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_candlenum(), target);
  }

  // int32 woodNum = 5;
  if (this->woodnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_woodnum(), target);
  }

  // int32 fogNum = 6;
  if (this->fognum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_fognum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CandleCardFeedback)
  return target;
}

size_t CandleCardFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CandleCardFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 waterNum = 1;
  if (this->waternum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_waternum());
  }

  // int32 fireNum = 2;
  if (this->firenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_firenum());
  }

  // int32 lightNum = 3;
  if (this->lightnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lightnum());
  }

  // int32 candleNum = 4;
  if (this->candlenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_candlenum());
  }

  // int32 woodNum = 5;
  if (this->woodnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_woodnum());
  }

  // int32 fogNum = 6;
  if (this->fognum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fognum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandleCardFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CandleCardFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const CandleCardFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandleCardFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CandleCardFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CandleCardFeedback)
    MergeFrom(*source);
  }
}

void CandleCardFeedback::MergeFrom(const CandleCardFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CandleCardFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.waternum() != 0) {
    _internal_set_waternum(from._internal_waternum());
  }
  if (from.firenum() != 0) {
    _internal_set_firenum(from._internal_firenum());
  }
  if (from.lightnum() != 0) {
    _internal_set_lightnum(from._internal_lightnum());
  }
  if (from.candlenum() != 0) {
    _internal_set_candlenum(from._internal_candlenum());
  }
  if (from.woodnum() != 0) {
    _internal_set_woodnum(from._internal_woodnum());
  }
  if (from.fognum() != 0) {
    _internal_set_fognum(from._internal_fognum());
  }
}

void CandleCardFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CandleCardFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandleCardFeedback::CopyFrom(const CandleCardFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CandleCardFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleCardFeedback::IsInitialized() const {
  return true;
}

void CandleCardFeedback::InternalSwap(CandleCardFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(waternum_, other->waternum_);
  swap(firenum_, other->firenum_);
  swap(lightnum_, other->lightnum_);
  swap(candlenum_, other->candlenum_);
  swap(woodnum_, other->woodnum_);
  swap(fognum_, other->fognum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandleCardFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PlayerOperation* Arena::CreateMaybeMessage< ::PlayerOperation >(Arena* arena) {
  return Arena::CreateInternal< ::PlayerOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomInfo* Arena::CreateMaybeMessage< ::RoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::OtherPlayerInfo* Arena::CreateMaybeMessage< ::OtherPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::OtherPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::LocalPlayerInfo* Arena::CreateMaybeMessage< ::LocalPlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::LocalPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::GameFinish* Arena::CreateMaybeMessage< ::GameFinish >(Arena* arena) {
  return Arena::CreateInternal< ::GameFinish >(arena);
}
template<> PROTOBUF_NOINLINE ::CandleCardFeedback* Arena::CreateMaybeMessage< ::CandleCardFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::CandleCardFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
