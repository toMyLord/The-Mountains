// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameContent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameContent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameContent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameContent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameContent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameContent_2eproto;
class CandleCardFeedback;
class CandleCardFeedbackDefaultTypeInternal;
extern CandleCardFeedbackDefaultTypeInternal _CandleCardFeedback_default_instance_;
class GameFinish;
class GameFinishDefaultTypeInternal;
extern GameFinishDefaultTypeInternal _GameFinish_default_instance_;
class LocalPlayerInfo;
class LocalPlayerInfoDefaultTypeInternal;
extern LocalPlayerInfoDefaultTypeInternal _LocalPlayerInfo_default_instance_;
class OtherPlayerInfo;
class OtherPlayerInfoDefaultTypeInternal;
extern OtherPlayerInfoDefaultTypeInternal _OtherPlayerInfo_default_instance_;
class PlayerOperation;
class PlayerOperationDefaultTypeInternal;
extern PlayerOperationDefaultTypeInternal _PlayerOperation_default_instance_;
class RoomInfo;
class RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CandleCardFeedback* Arena::CreateMaybeMessage<::CandleCardFeedback>(Arena*);
template<> ::GameFinish* Arena::CreateMaybeMessage<::GameFinish>(Arena*);
template<> ::LocalPlayerInfo* Arena::CreateMaybeMessage<::LocalPlayerInfo>(Arena*);
template<> ::OtherPlayerInfo* Arena::CreateMaybeMessage<::OtherPlayerInfo>(Arena*);
template<> ::PlayerOperation* Arena::CreateMaybeMessage<::PlayerOperation>(Arena*);
template<> ::RoomInfo* Arena::CreateMaybeMessage<::RoomInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PlayerOperation_OperationType : int {
  PlayerOperation_OperationType_Compound = 0,
  PlayerOperation_OperationType_Transfer = 1,
  PlayerOperation_OperationType_Use = 2,
  PlayerOperation_OperationType_PlayerOperation_OperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerOperation_OperationType_PlayerOperation_OperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerOperation_OperationType_IsValid(int value);
constexpr PlayerOperation_OperationType PlayerOperation_OperationType_OperationType_MIN = PlayerOperation_OperationType_Compound;
constexpr PlayerOperation_OperationType PlayerOperation_OperationType_OperationType_MAX = PlayerOperation_OperationType_Use;
constexpr int PlayerOperation_OperationType_OperationType_ARRAYSIZE = PlayerOperation_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerOperation_OperationType_descriptor();
template<typename T>
inline const std::string& PlayerOperation_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerOperation_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerOperation_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerOperation_OperationType_descriptor(), enum_t_value);
}
inline bool PlayerOperation_OperationType_Parse(
    const std::string& name, PlayerOperation_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerOperation_OperationType>(
    PlayerOperation_OperationType_descriptor(), name, value);
}
enum PlayerOperation_CardType : int {
  PlayerOperation_CardType_Water = 0,
  PlayerOperation_CardType_Fire = 1,
  PlayerOperation_CardType_Light = 2,
  PlayerOperation_CardType_Candle = 3,
  PlayerOperation_CardType_Wood = 4,
  PlayerOperation_CardType_Fog = 5,
  PlayerOperation_CardType_Witch = 6,
  PlayerOperation_CardType_PlayerOperation_CardType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlayerOperation_CardType_PlayerOperation_CardType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlayerOperation_CardType_IsValid(int value);
constexpr PlayerOperation_CardType PlayerOperation_CardType_CardType_MIN = PlayerOperation_CardType_Water;
constexpr PlayerOperation_CardType PlayerOperation_CardType_CardType_MAX = PlayerOperation_CardType_Witch;
constexpr int PlayerOperation_CardType_CardType_ARRAYSIZE = PlayerOperation_CardType_CardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayerOperation_CardType_descriptor();
template<typename T>
inline const std::string& PlayerOperation_CardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerOperation_CardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerOperation_CardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlayerOperation_CardType_descriptor(), enum_t_value);
}
inline bool PlayerOperation_CardType_Parse(
    const std::string& name, PlayerOperation_CardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerOperation_CardType>(
    PlayerOperation_CardType_descriptor(), name, value);
}
enum OtherPlayerInfo_PlayerStatus : int {
  OtherPlayerInfo_PlayerStatus_Normal = 0,
  OtherPlayerInfo_PlayerStatus_Wood = 1,
  OtherPlayerInfo_PlayerStatus_Fog = 2,
  OtherPlayerInfo_PlayerStatus_OtherPlayerInfo_PlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OtherPlayerInfo_PlayerStatus_OtherPlayerInfo_PlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OtherPlayerInfo_PlayerStatus_IsValid(int value);
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo_PlayerStatus_PlayerStatus_MIN = OtherPlayerInfo_PlayerStatus_Normal;
constexpr OtherPlayerInfo_PlayerStatus OtherPlayerInfo_PlayerStatus_PlayerStatus_MAX = OtherPlayerInfo_PlayerStatus_Fog;
constexpr int OtherPlayerInfo_PlayerStatus_PlayerStatus_ARRAYSIZE = OtherPlayerInfo_PlayerStatus_PlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OtherPlayerInfo_PlayerStatus_descriptor();
template<typename T>
inline const std::string& OtherPlayerInfo_PlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OtherPlayerInfo_PlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OtherPlayerInfo_PlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OtherPlayerInfo_PlayerStatus_descriptor(), enum_t_value);
}
inline bool OtherPlayerInfo_PlayerStatus_Parse(
    const std::string& name, OtherPlayerInfo_PlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OtherPlayerInfo_PlayerStatus>(
    OtherPlayerInfo_PlayerStatus_descriptor(), name, value);
}
enum LocalPlayerInfo_PlayerStatus : int {
  LocalPlayerInfo_PlayerStatus_Normal = 0,
  LocalPlayerInfo_PlayerStatus_Wood = 1,
  LocalPlayerInfo_PlayerStatus_Fog = 2,
  LocalPlayerInfo_PlayerStatus_LocalPlayerInfo_PlayerStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LocalPlayerInfo_PlayerStatus_LocalPlayerInfo_PlayerStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LocalPlayerInfo_PlayerStatus_IsValid(int value);
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo_PlayerStatus_PlayerStatus_MIN = LocalPlayerInfo_PlayerStatus_Normal;
constexpr LocalPlayerInfo_PlayerStatus LocalPlayerInfo_PlayerStatus_PlayerStatus_MAX = LocalPlayerInfo_PlayerStatus_Fog;
constexpr int LocalPlayerInfo_PlayerStatus_PlayerStatus_ARRAYSIZE = LocalPlayerInfo_PlayerStatus_PlayerStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalPlayerInfo_PlayerStatus_descriptor();
template<typename T>
inline const std::string& LocalPlayerInfo_PlayerStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalPlayerInfo_PlayerStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalPlayerInfo_PlayerStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalPlayerInfo_PlayerStatus_descriptor(), enum_t_value);
}
inline bool LocalPlayerInfo_PlayerStatus_Parse(
    const std::string& name, LocalPlayerInfo_PlayerStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalPlayerInfo_PlayerStatus>(
    LocalPlayerInfo_PlayerStatus_descriptor(), name, value);
}
// ===================================================================

class PlayerOperation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PlayerOperation) */ {
 public:
  PlayerOperation();
  virtual ~PlayerOperation();

  PlayerOperation(const PlayerOperation& from);
  PlayerOperation(PlayerOperation&& from) noexcept
    : PlayerOperation() {
    *this = ::std::move(from);
  }

  inline PlayerOperation& operator=(const PlayerOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOperation& operator=(PlayerOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerOperation* internal_default_instance() {
    return reinterpret_cast<const PlayerOperation*>(
               &_PlayerOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlayerOperation& a, PlayerOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOperation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerOperation* New() const final {
    return CreateMaybeMessage<PlayerOperation>(nullptr);
  }

  PlayerOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerOperation& from);
  void MergeFrom(const PlayerOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PlayerOperation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlayerOperation_OperationType OperationType;
  static constexpr OperationType Compound =
    PlayerOperation_OperationType_Compound;
  static constexpr OperationType Transfer =
    PlayerOperation_OperationType_Transfer;
  static constexpr OperationType Use =
    PlayerOperation_OperationType_Use;
  static inline bool OperationType_IsValid(int value) {
    return PlayerOperation_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    PlayerOperation_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    PlayerOperation_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    PlayerOperation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return PlayerOperation_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return PlayerOperation_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(const std::string& name,
      OperationType* value) {
    return PlayerOperation_OperationType_Parse(name, value);
  }

  typedef PlayerOperation_CardType CardType;
  static constexpr CardType Water =
    PlayerOperation_CardType_Water;
  static constexpr CardType Fire =
    PlayerOperation_CardType_Fire;
  static constexpr CardType Light =
    PlayerOperation_CardType_Light;
  static constexpr CardType Candle =
    PlayerOperation_CardType_Candle;
  static constexpr CardType Wood =
    PlayerOperation_CardType_Wood;
  static constexpr CardType Fog =
    PlayerOperation_CardType_Fog;
  static constexpr CardType Witch =
    PlayerOperation_CardType_Witch;
  static inline bool CardType_IsValid(int value) {
    return PlayerOperation_CardType_IsValid(value);
  }
  static constexpr CardType CardType_MIN =
    PlayerOperation_CardType_CardType_MIN;
  static constexpr CardType CardType_MAX =
    PlayerOperation_CardType_CardType_MAX;
  static constexpr int CardType_ARRAYSIZE =
    PlayerOperation_CardType_CardType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CardType_descriptor() {
    return PlayerOperation_CardType_descriptor();
  }
  template<typename T>
  static inline const std::string& CardType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CardType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CardType_Name.");
    return PlayerOperation_CardType_Name(enum_t_value);
  }
  static inline bool CardType_Parse(const std::string& name,
      CardType* value) {
    return PlayerOperation_CardType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNumFieldNumber = 1,
    kOperationFieldNumber = 2,
    kCardFieldNumber = 3,
  };
  // int32 seatNum = 1;
  void clear_seatnum();
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum() const;
  void set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seatnum() const;
  void _internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .PlayerOperation.OperationType operation = 2;
  void clear_operation();
  ::PlayerOperation_OperationType operation() const;
  void set_operation(::PlayerOperation_OperationType value);
  private:
  ::PlayerOperation_OperationType _internal_operation() const;
  void _internal_set_operation(::PlayerOperation_OperationType value);
  public:

  // .PlayerOperation.CardType card = 3;
  void clear_card();
  ::PlayerOperation_CardType card() const;
  void set_card(::PlayerOperation_CardType value);
  private:
  ::PlayerOperation_CardType _internal_card() const;
  void _internal_set_card(::PlayerOperation_CardType value);
  public:

  // @@protoc_insertion_point(class_scope:PlayerOperation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum_;
  int operation_;
  int card_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoomInfo) */ {
 public:
  RoomInfo();
  virtual ~RoomInfo();

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoomInfo* New() const final {
    return CreateMaybeMessage<RoomInfo>(nullptr);
  }

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoomInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 1,
    kTimeFieldNumber = 2,
    kPlayerNumFieldNumber = 3,
    kCandleNumFieldNumber = 4,
    kWoodNumFieldNumber = 5,
    kFogNumFieldNumber = 6,
    kWitchNumFieldNumber = 7,
    kCurrOperationPlayerNumFieldNumber = 8,
  };
  // int32 roomID = 1;
  void clear_roomid();
  ::PROTOBUF_NAMESPACE_ID::int32 roomid() const;
  void set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_roomid() const;
  void _internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 playerNum = 3;
  void clear_playernum();
  ::PROTOBUF_NAMESPACE_ID::int32 playernum() const;
  void set_playernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playernum() const;
  void _internal_set_playernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 candleNum = 4;
  void clear_candlenum();
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum() const;
  void set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candlenum() const;
  void _internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 woodNum = 5;
  void clear_woodnum();
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum() const;
  void set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_woodnum() const;
  void _internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fogNum = 6;
  void clear_fognum();
  ::PROTOBUF_NAMESPACE_ID::int32 fognum() const;
  void set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fognum() const;
  void _internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witchNum = 7;
  void clear_witchnum();
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum() const;
  void set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witchnum() const;
  void _internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 currOperationPlayerNum = 8;
  void clear_curroperationplayernum();
  ::PROTOBUF_NAMESPACE_ID::int32 curroperationplayernum() const;
  void set_curroperationplayernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_curroperationplayernum() const;
  void _internal_set_curroperationplayernum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RoomInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 roomid_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 playernum_;
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fognum_;
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 curroperationplayernum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// -------------------------------------------------------------------

class OtherPlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:OtherPlayerInfo) */ {
 public:
  OtherPlayerInfo();
  virtual ~OtherPlayerInfo();

  OtherPlayerInfo(const OtherPlayerInfo& from);
  OtherPlayerInfo(OtherPlayerInfo&& from) noexcept
    : OtherPlayerInfo() {
    *this = ::std::move(from);
  }

  inline OtherPlayerInfo& operator=(const OtherPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherPlayerInfo& operator=(OtherPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const OtherPlayerInfo*>(
               &_OtherPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OtherPlayerInfo& a, OtherPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherPlayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherPlayerInfo* New() const final {
    return CreateMaybeMessage<OtherPlayerInfo>(nullptr);
  }

  OtherPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherPlayerInfo& from);
  void MergeFrom(const OtherPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OtherPlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OtherPlayerInfo_PlayerStatus PlayerStatus;
  static constexpr PlayerStatus Normal =
    OtherPlayerInfo_PlayerStatus_Normal;
  static constexpr PlayerStatus Wood =
    OtherPlayerInfo_PlayerStatus_Wood;
  static constexpr PlayerStatus Fog =
    OtherPlayerInfo_PlayerStatus_Fog;
  static inline bool PlayerStatus_IsValid(int value) {
    return OtherPlayerInfo_PlayerStatus_IsValid(value);
  }
  static constexpr PlayerStatus PlayerStatus_MIN =
    OtherPlayerInfo_PlayerStatus_PlayerStatus_MIN;
  static constexpr PlayerStatus PlayerStatus_MAX =
    OtherPlayerInfo_PlayerStatus_PlayerStatus_MAX;
  static constexpr int PlayerStatus_ARRAYSIZE =
    OtherPlayerInfo_PlayerStatus_PlayerStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerStatus_descriptor() {
    return OtherPlayerInfo_PlayerStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerStatus_Name.");
    return OtherPlayerInfo_PlayerStatus_Name(enum_t_value);
  }
  static inline bool PlayerStatus_Parse(const std::string& name,
      PlayerStatus* value) {
    return OtherPlayerInfo_PlayerStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
    kSeatNumFieldNumber = 3,
    kCardNumFieldNumber = 4,
    kWitchNumFieldNumber = 5,
    kCurrPlayerStatusFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seatNum = 3;
  void clear_seatnum();
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum() const;
  void set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seatnum() const;
  void _internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cardNum = 4;
  void clear_cardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum() const;
  void set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardnum() const;
  void _internal_set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witchNum = 5;
  void clear_witchnum();
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum() const;
  void set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witchnum() const;
  void _internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .OtherPlayerInfo.PlayerStatus CurrPlayerStatus = 6;
  void clear_currplayerstatus();
  ::OtherPlayerInfo_PlayerStatus currplayerstatus() const;
  void set_currplayerstatus(::OtherPlayerInfo_PlayerStatus value);
  private:
  ::OtherPlayerInfo_PlayerStatus _internal_currplayerstatus() const;
  void _internal_set_currplayerstatus(::OtherPlayerInfo_PlayerStatus value);
  public:

  // @@protoc_insertion_point(class_scope:OtherPlayerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum_;
  int currplayerstatus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// -------------------------------------------------------------------

class LocalPlayerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LocalPlayerInfo) */ {
 public:
  LocalPlayerInfo();
  virtual ~LocalPlayerInfo();

  LocalPlayerInfo(const LocalPlayerInfo& from);
  LocalPlayerInfo(LocalPlayerInfo&& from) noexcept
    : LocalPlayerInfo() {
    *this = ::std::move(from);
  }

  inline LocalPlayerInfo& operator=(const LocalPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalPlayerInfo& operator=(LocalPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalPlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const LocalPlayerInfo*>(
               &_LocalPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalPlayerInfo& a, LocalPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalPlayerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalPlayerInfo* New() const final {
    return CreateMaybeMessage<LocalPlayerInfo>(nullptr);
  }

  LocalPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalPlayerInfo& from);
  void MergeFrom(const LocalPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LocalPlayerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LocalPlayerInfo_PlayerStatus PlayerStatus;
  static constexpr PlayerStatus Normal =
    LocalPlayerInfo_PlayerStatus_Normal;
  static constexpr PlayerStatus Wood =
    LocalPlayerInfo_PlayerStatus_Wood;
  static constexpr PlayerStatus Fog =
    LocalPlayerInfo_PlayerStatus_Fog;
  static inline bool PlayerStatus_IsValid(int value) {
    return LocalPlayerInfo_PlayerStatus_IsValid(value);
  }
  static constexpr PlayerStatus PlayerStatus_MIN =
    LocalPlayerInfo_PlayerStatus_PlayerStatus_MIN;
  static constexpr PlayerStatus PlayerStatus_MAX =
    LocalPlayerInfo_PlayerStatus_PlayerStatus_MAX;
  static constexpr int PlayerStatus_ARRAYSIZE =
    LocalPlayerInfo_PlayerStatus_PlayerStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PlayerStatus_descriptor() {
    return LocalPlayerInfo_PlayerStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PlayerStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlayerStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlayerStatus_Name.");
    return LocalPlayerInfo_PlayerStatus_Name(enum_t_value);
  }
  static inline bool PlayerStatus_Parse(const std::string& name,
      PlayerStatus* value) {
    return LocalPlayerInfo_PlayerStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCardNumFieldNumber = 1,
    kWaterNumFieldNumber = 2,
    kFireNumFieldNumber = 3,
    kLightNumFieldNumber = 4,
    kCandleNumFieldNumber = 5,
    kWoodNumFieldNumber = 6,
    kFogNumFieldNumber = 7,
    kWitchNumFieldNumber = 8,
    kCurrPlayerStatusFieldNumber = 9,
    kSeatNumFieldNumber = 10,
  };
  // int32 cardNum = 1;
  void clear_cardnum();
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum() const;
  void set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cardnum() const;
  void _internal_set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 waterNum = 2;
  void clear_waternum();
  ::PROTOBUF_NAMESPACE_ID::int32 waternum() const;
  void set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waternum() const;
  void _internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fireNum = 3;
  void clear_firenum();
  ::PROTOBUF_NAMESPACE_ID::int32 firenum() const;
  void set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_firenum() const;
  void _internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lightNum = 4;
  void clear_lightnum();
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum() const;
  void set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lightnum() const;
  void _internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 candleNum = 5;
  void clear_candlenum();
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum() const;
  void set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candlenum() const;
  void _internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 woodNum = 6;
  void clear_woodnum();
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum() const;
  void set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_woodnum() const;
  void _internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fogNum = 7;
  void clear_fognum();
  ::PROTOBUF_NAMESPACE_ID::int32 fognum() const;
  void set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fognum() const;
  void _internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witchNum = 8;
  void clear_witchnum();
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum() const;
  void set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witchnum() const;
  void _internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .LocalPlayerInfo.PlayerStatus CurrPlayerStatus = 9;
  void clear_currplayerstatus();
  ::LocalPlayerInfo_PlayerStatus currplayerstatus() const;
  void set_currplayerstatus(::LocalPlayerInfo_PlayerStatus value);
  private:
  ::LocalPlayerInfo_PlayerStatus _internal_currplayerstatus() const;
  void _internal_set_currplayerstatus(::LocalPlayerInfo_PlayerStatus value);
  public:

  // int32 seatNum = 10;
  void clear_seatnum();
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum() const;
  void set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seatnum() const;
  void _internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:LocalPlayerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 cardnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 waternum_;
  ::PROTOBUF_NAMESPACE_ID::int32 firenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fognum_;
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum_;
  int currplayerstatus_;
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// -------------------------------------------------------------------

class GameFinish :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameFinish) */ {
 public:
  GameFinish();
  virtual ~GameFinish();

  GameFinish(const GameFinish& from);
  GameFinish(GameFinish&& from) noexcept
    : GameFinish() {
    *this = ::std::move(from);
  }

  inline GameFinish& operator=(const GameFinish& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameFinish& operator=(GameFinish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameFinish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameFinish* internal_default_instance() {
    return reinterpret_cast<const GameFinish*>(
               &_GameFinish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameFinish& a, GameFinish& b) {
    a.Swap(&b);
  }
  inline void Swap(GameFinish* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameFinish* New() const final {
    return CreateMaybeMessage<GameFinish>(nullptr);
  }

  GameFinish* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameFinish>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameFinish& from);
  void MergeFrom(const GameFinish& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameFinish* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameFinish";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNumFieldNumber = 1,
    kWaterNumFieldNumber = 2,
    kFireNumFieldNumber = 3,
    kLightNumFieldNumber = 4,
    kCandleNumFieldNumber = 5,
    kWoodNumFieldNumber = 6,
    kFogNumFieldNumber = 7,
    kWitchNumFieldNumber = 8,
    kGameScoreFieldNumber = 9,
  };
  // int32 seatNum = 1;
  void clear_seatnum();
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum() const;
  void set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seatnum() const;
  void _internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 waterNum = 2;
  void clear_waternum();
  ::PROTOBUF_NAMESPACE_ID::int32 waternum() const;
  void set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waternum() const;
  void _internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fireNum = 3;
  void clear_firenum();
  ::PROTOBUF_NAMESPACE_ID::int32 firenum() const;
  void set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_firenum() const;
  void _internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lightNum = 4;
  void clear_lightnum();
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum() const;
  void set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lightnum() const;
  void _internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 candleNum = 5;
  void clear_candlenum();
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum() const;
  void set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candlenum() const;
  void _internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 woodNum = 6;
  void clear_woodnum();
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum() const;
  void set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_woodnum() const;
  void _internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fogNum = 7;
  void clear_fognum();
  ::PROTOBUF_NAMESPACE_ID::int32 fognum() const;
  void set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fognum() const;
  void _internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witchNum = 8;
  void clear_witchnum();
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum() const;
  void set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witchnum() const;
  void _internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gameScore = 9;
  void clear_gamescore();
  ::PROTOBUF_NAMESPACE_ID::int32 gamescore() const;
  void set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamescore() const;
  void _internal_set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GameFinish)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 seatnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 waternum_;
  ::PROTOBUF_NAMESPACE_ID::int32 firenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fognum_;
  ::PROTOBUF_NAMESPACE_ID::int32 witchnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 gamescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// -------------------------------------------------------------------

class CandleCardFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CandleCardFeedback) */ {
 public:
  CandleCardFeedback();
  virtual ~CandleCardFeedback();

  CandleCardFeedback(const CandleCardFeedback& from);
  CandleCardFeedback(CandleCardFeedback&& from) noexcept
    : CandleCardFeedback() {
    *this = ::std::move(from);
  }

  inline CandleCardFeedback& operator=(const CandleCardFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandleCardFeedback& operator=(CandleCardFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandleCardFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandleCardFeedback* internal_default_instance() {
    return reinterpret_cast<const CandleCardFeedback*>(
               &_CandleCardFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CandleCardFeedback& a, CandleCardFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(CandleCardFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandleCardFeedback* New() const final {
    return CreateMaybeMessage<CandleCardFeedback>(nullptr);
  }

  CandleCardFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandleCardFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandleCardFeedback& from);
  void MergeFrom(const CandleCardFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandleCardFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CandleCardFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameContent_2eproto);
    return ::descriptor_table_GameContent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaterNumFieldNumber = 1,
    kFireNumFieldNumber = 2,
    kLightNumFieldNumber = 3,
    kCandleNumFieldNumber = 4,
    kWoodNumFieldNumber = 5,
    kFogNumFieldNumber = 6,
  };
  // int32 waterNum = 1;
  void clear_waternum();
  ::PROTOBUF_NAMESPACE_ID::int32 waternum() const;
  void set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_waternum() const;
  void _internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fireNum = 2;
  void clear_firenum();
  ::PROTOBUF_NAMESPACE_ID::int32 firenum() const;
  void set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_firenum() const;
  void _internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lightNum = 3;
  void clear_lightnum();
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum() const;
  void set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lightnum() const;
  void _internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 candleNum = 4;
  void clear_candlenum();
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum() const;
  void set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_candlenum() const;
  void _internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 woodNum = 5;
  void clear_woodnum();
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum() const;
  void set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_woodnum() const;
  void _internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fogNum = 6;
  void clear_fognum();
  ::PROTOBUF_NAMESPACE_ID::int32 fognum() const;
  void set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fognum() const;
  void _internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CandleCardFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 waternum_;
  ::PROTOBUF_NAMESPACE_ID::int32 firenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 lightnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 candlenum_;
  ::PROTOBUF_NAMESPACE_ID::int32 woodnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fognum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_GameContent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlayerOperation

// int32 seatNum = 1;
inline void PlayerOperation::clear_seatnum() {
  seatnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperation::_internal_seatnum() const {
  return seatnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOperation::seatnum() const {
  // @@protoc_insertion_point(field_get:PlayerOperation.seatNum)
  return _internal_seatnum();
}
inline void PlayerOperation::_internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seatnum_ = value;
}
inline void PlayerOperation::set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seatnum(value);
  // @@protoc_insertion_point(field_set:PlayerOperation.seatNum)
}

// .PlayerOperation.OperationType operation = 2;
inline void PlayerOperation::clear_operation() {
  operation_ = 0;
}
inline ::PlayerOperation_OperationType PlayerOperation::_internal_operation() const {
  return static_cast< ::PlayerOperation_OperationType >(operation_);
}
inline ::PlayerOperation_OperationType PlayerOperation::operation() const {
  // @@protoc_insertion_point(field_get:PlayerOperation.operation)
  return _internal_operation();
}
inline void PlayerOperation::_internal_set_operation(::PlayerOperation_OperationType value) {
  
  operation_ = value;
}
inline void PlayerOperation::set_operation(::PlayerOperation_OperationType value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:PlayerOperation.operation)
}

// .PlayerOperation.CardType card = 3;
inline void PlayerOperation::clear_card() {
  card_ = 0;
}
inline ::PlayerOperation_CardType PlayerOperation::_internal_card() const {
  return static_cast< ::PlayerOperation_CardType >(card_);
}
inline ::PlayerOperation_CardType PlayerOperation::card() const {
  // @@protoc_insertion_point(field_get:PlayerOperation.card)
  return _internal_card();
}
inline void PlayerOperation::_internal_set_card(::PlayerOperation_CardType value) {
  
  card_ = value;
}
inline void PlayerOperation::set_card(::PlayerOperation_CardType value) {
  _internal_set_card(value);
  // @@protoc_insertion_point(field_set:PlayerOperation.card)
}

// -------------------------------------------------------------------

// RoomInfo

// int32 roomID = 1;
inline void RoomInfo::clear_roomid() {
  roomid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_roomid() const {
  return roomid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:RoomInfo.roomID)
  return _internal_roomid();
}
inline void RoomInfo::_internal_set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  roomid_ = value;
}
inline void RoomInfo::set_roomid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:RoomInfo.roomID)
}

// int32 time = 2;
inline void RoomInfo::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::time() const {
  // @@protoc_insertion_point(field_get:RoomInfo.time)
  return _internal_time();
}
inline void RoomInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void RoomInfo::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:RoomInfo.time)
}

// int32 playerNum = 3;
inline void RoomInfo::clear_playernum() {
  playernum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_playernum() const {
  return playernum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::playernum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.playerNum)
  return _internal_playernum();
}
inline void RoomInfo::_internal_set_playernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playernum_ = value;
}
inline void RoomInfo::set_playernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playernum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.playerNum)
}

// int32 candleNum = 4;
inline void RoomInfo::clear_candlenum() {
  candlenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_candlenum() const {
  return candlenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::candlenum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.candleNum)
  return _internal_candlenum();
}
inline void RoomInfo::_internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candlenum_ = value;
}
inline void RoomInfo::set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candlenum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.candleNum)
}

// int32 woodNum = 5;
inline void RoomInfo::clear_woodnum() {
  woodnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_woodnum() const {
  return woodnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::woodnum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.woodNum)
  return _internal_woodnum();
}
inline void RoomInfo::_internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  woodnum_ = value;
}
inline void RoomInfo::set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_woodnum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.woodNum)
}

// int32 fogNum = 6;
inline void RoomInfo::clear_fognum() {
  fognum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_fognum() const {
  return fognum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::fognum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.fogNum)
  return _internal_fognum();
}
inline void RoomInfo::_internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fognum_ = value;
}
inline void RoomInfo::set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fognum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.fogNum)
}

// int32 witchNum = 7;
inline void RoomInfo::clear_witchnum() {
  witchnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_witchnum() const {
  return witchnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::witchnum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.witchNum)
  return _internal_witchnum();
}
inline void RoomInfo::_internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witchnum_ = value;
}
inline void RoomInfo::set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witchnum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.witchNum)
}

// int32 currOperationPlayerNum = 8;
inline void RoomInfo::clear_curroperationplayernum() {
  curroperationplayernum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::_internal_curroperationplayernum() const {
  return curroperationplayernum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoomInfo::curroperationplayernum() const {
  // @@protoc_insertion_point(field_get:RoomInfo.currOperationPlayerNum)
  return _internal_curroperationplayernum();
}
inline void RoomInfo::_internal_set_curroperationplayernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  curroperationplayernum_ = value;
}
inline void RoomInfo::set_curroperationplayernum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_curroperationplayernum(value);
  // @@protoc_insertion_point(field_set:RoomInfo.currOperationPlayerNum)
}

// -------------------------------------------------------------------

// OtherPlayerInfo

// string name = 1;
inline void OtherPlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OtherPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.name)
  return _internal_name();
}
inline void OtherPlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.name)
}
inline std::string* OtherPlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:OtherPlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& OtherPlayerInfo::_internal_name() const {
  return name_.GetNoArena();
}
inline void OtherPlayerInfo::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OtherPlayerInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OtherPlayerInfo.name)
}
inline void OtherPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OtherPlayerInfo.name)
}
inline void OtherPlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OtherPlayerInfo.name)
}
inline std::string* OtherPlayerInfo::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OtherPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:OtherPlayerInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OtherPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:OtherPlayerInfo.name)
}

// int32 score = 2;
inline void OtherPlayerInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::score() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.score)
  return _internal_score();
}
inline void OtherPlayerInfo::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
}
inline void OtherPlayerInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.score)
}

// int32 seatNum = 3;
inline void OtherPlayerInfo::clear_seatnum() {
  seatnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_seatnum() const {
  return seatnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::seatnum() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.seatNum)
  return _internal_seatnum();
}
inline void OtherPlayerInfo::_internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seatnum_ = value;
}
inline void OtherPlayerInfo::set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seatnum(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.seatNum)
}

// int32 cardNum = 4;
inline void OtherPlayerInfo::clear_cardnum() {
  cardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_cardnum() const {
  return cardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::cardnum() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.cardNum)
  return _internal_cardnum();
}
inline void OtherPlayerInfo::_internal_set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardnum_ = value;
}
inline void OtherPlayerInfo::set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardnum(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.cardNum)
}

// int32 witchNum = 5;
inline void OtherPlayerInfo::clear_witchnum() {
  witchnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::_internal_witchnum() const {
  return witchnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OtherPlayerInfo::witchnum() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.witchNum)
  return _internal_witchnum();
}
inline void OtherPlayerInfo::_internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witchnum_ = value;
}
inline void OtherPlayerInfo::set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witchnum(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.witchNum)
}

// .OtherPlayerInfo.PlayerStatus CurrPlayerStatus = 6;
inline void OtherPlayerInfo::clear_currplayerstatus() {
  currplayerstatus_ = 0;
}
inline ::OtherPlayerInfo_PlayerStatus OtherPlayerInfo::_internal_currplayerstatus() const {
  return static_cast< ::OtherPlayerInfo_PlayerStatus >(currplayerstatus_);
}
inline ::OtherPlayerInfo_PlayerStatus OtherPlayerInfo::currplayerstatus() const {
  // @@protoc_insertion_point(field_get:OtherPlayerInfo.CurrPlayerStatus)
  return _internal_currplayerstatus();
}
inline void OtherPlayerInfo::_internal_set_currplayerstatus(::OtherPlayerInfo_PlayerStatus value) {
  
  currplayerstatus_ = value;
}
inline void OtherPlayerInfo::set_currplayerstatus(::OtherPlayerInfo_PlayerStatus value) {
  _internal_set_currplayerstatus(value);
  // @@protoc_insertion_point(field_set:OtherPlayerInfo.CurrPlayerStatus)
}

// -------------------------------------------------------------------

// LocalPlayerInfo

// int32 cardNum = 1;
inline void LocalPlayerInfo::clear_cardnum() {
  cardnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_cardnum() const {
  return cardnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::cardnum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.cardNum)
  return _internal_cardnum();
}
inline void LocalPlayerInfo::_internal_set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cardnum_ = value;
}
inline void LocalPlayerInfo::set_cardnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cardnum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.cardNum)
}

// int32 waterNum = 2;
inline void LocalPlayerInfo::clear_waternum() {
  waternum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_waternum() const {
  return waternum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::waternum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.waterNum)
  return _internal_waternum();
}
inline void LocalPlayerInfo::_internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waternum_ = value;
}
inline void LocalPlayerInfo::set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waternum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.waterNum)
}

// int32 fireNum = 3;
inline void LocalPlayerInfo::clear_firenum() {
  firenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_firenum() const {
  return firenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::firenum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.fireNum)
  return _internal_firenum();
}
inline void LocalPlayerInfo::_internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firenum_ = value;
}
inline void LocalPlayerInfo::set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_firenum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.fireNum)
}

// int32 lightNum = 4;
inline void LocalPlayerInfo::clear_lightnum() {
  lightnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_lightnum() const {
  return lightnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::lightnum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.lightNum)
  return _internal_lightnum();
}
inline void LocalPlayerInfo::_internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lightnum_ = value;
}
inline void LocalPlayerInfo::set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lightnum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.lightNum)
}

// int32 candleNum = 5;
inline void LocalPlayerInfo::clear_candlenum() {
  candlenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_candlenum() const {
  return candlenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::candlenum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.candleNum)
  return _internal_candlenum();
}
inline void LocalPlayerInfo::_internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candlenum_ = value;
}
inline void LocalPlayerInfo::set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candlenum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.candleNum)
}

// int32 woodNum = 6;
inline void LocalPlayerInfo::clear_woodnum() {
  woodnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_woodnum() const {
  return woodnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::woodnum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.woodNum)
  return _internal_woodnum();
}
inline void LocalPlayerInfo::_internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  woodnum_ = value;
}
inline void LocalPlayerInfo::set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_woodnum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.woodNum)
}

// int32 fogNum = 7;
inline void LocalPlayerInfo::clear_fognum() {
  fognum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_fognum() const {
  return fognum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::fognum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.fogNum)
  return _internal_fognum();
}
inline void LocalPlayerInfo::_internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fognum_ = value;
}
inline void LocalPlayerInfo::set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fognum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.fogNum)
}

// int32 witchNum = 8;
inline void LocalPlayerInfo::clear_witchnum() {
  witchnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_witchnum() const {
  return witchnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::witchnum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.witchNum)
  return _internal_witchnum();
}
inline void LocalPlayerInfo::_internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witchnum_ = value;
}
inline void LocalPlayerInfo::set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witchnum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.witchNum)
}

// .LocalPlayerInfo.PlayerStatus CurrPlayerStatus = 9;
inline void LocalPlayerInfo::clear_currplayerstatus() {
  currplayerstatus_ = 0;
}
inline ::LocalPlayerInfo_PlayerStatus LocalPlayerInfo::_internal_currplayerstatus() const {
  return static_cast< ::LocalPlayerInfo_PlayerStatus >(currplayerstatus_);
}
inline ::LocalPlayerInfo_PlayerStatus LocalPlayerInfo::currplayerstatus() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.CurrPlayerStatus)
  return _internal_currplayerstatus();
}
inline void LocalPlayerInfo::_internal_set_currplayerstatus(::LocalPlayerInfo_PlayerStatus value) {
  
  currplayerstatus_ = value;
}
inline void LocalPlayerInfo::set_currplayerstatus(::LocalPlayerInfo_PlayerStatus value) {
  _internal_set_currplayerstatus(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.CurrPlayerStatus)
}

// int32 seatNum = 10;
inline void LocalPlayerInfo::clear_seatnum() {
  seatnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::_internal_seatnum() const {
  return seatnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalPlayerInfo::seatnum() const {
  // @@protoc_insertion_point(field_get:LocalPlayerInfo.seatNum)
  return _internal_seatnum();
}
inline void LocalPlayerInfo::_internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seatnum_ = value;
}
inline void LocalPlayerInfo::set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seatnum(value);
  // @@protoc_insertion_point(field_set:LocalPlayerInfo.seatNum)
}

// -------------------------------------------------------------------

// GameFinish

// int32 seatNum = 1;
inline void GameFinish::clear_seatnum() {
  seatnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_seatnum() const {
  return seatnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::seatnum() const {
  // @@protoc_insertion_point(field_get:GameFinish.seatNum)
  return _internal_seatnum();
}
inline void GameFinish::_internal_set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seatnum_ = value;
}
inline void GameFinish::set_seatnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seatnum(value);
  // @@protoc_insertion_point(field_set:GameFinish.seatNum)
}

// int32 waterNum = 2;
inline void GameFinish::clear_waternum() {
  waternum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_waternum() const {
  return waternum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::waternum() const {
  // @@protoc_insertion_point(field_get:GameFinish.waterNum)
  return _internal_waternum();
}
inline void GameFinish::_internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waternum_ = value;
}
inline void GameFinish::set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waternum(value);
  // @@protoc_insertion_point(field_set:GameFinish.waterNum)
}

// int32 fireNum = 3;
inline void GameFinish::clear_firenum() {
  firenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_firenum() const {
  return firenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::firenum() const {
  // @@protoc_insertion_point(field_get:GameFinish.fireNum)
  return _internal_firenum();
}
inline void GameFinish::_internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firenum_ = value;
}
inline void GameFinish::set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_firenum(value);
  // @@protoc_insertion_point(field_set:GameFinish.fireNum)
}

// int32 lightNum = 4;
inline void GameFinish::clear_lightnum() {
  lightnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_lightnum() const {
  return lightnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::lightnum() const {
  // @@protoc_insertion_point(field_get:GameFinish.lightNum)
  return _internal_lightnum();
}
inline void GameFinish::_internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lightnum_ = value;
}
inline void GameFinish::set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lightnum(value);
  // @@protoc_insertion_point(field_set:GameFinish.lightNum)
}

// int32 candleNum = 5;
inline void GameFinish::clear_candlenum() {
  candlenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_candlenum() const {
  return candlenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::candlenum() const {
  // @@protoc_insertion_point(field_get:GameFinish.candleNum)
  return _internal_candlenum();
}
inline void GameFinish::_internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candlenum_ = value;
}
inline void GameFinish::set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candlenum(value);
  // @@protoc_insertion_point(field_set:GameFinish.candleNum)
}

// int32 woodNum = 6;
inline void GameFinish::clear_woodnum() {
  woodnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_woodnum() const {
  return woodnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::woodnum() const {
  // @@protoc_insertion_point(field_get:GameFinish.woodNum)
  return _internal_woodnum();
}
inline void GameFinish::_internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  woodnum_ = value;
}
inline void GameFinish::set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_woodnum(value);
  // @@protoc_insertion_point(field_set:GameFinish.woodNum)
}

// int32 fogNum = 7;
inline void GameFinish::clear_fognum() {
  fognum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_fognum() const {
  return fognum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::fognum() const {
  // @@protoc_insertion_point(field_get:GameFinish.fogNum)
  return _internal_fognum();
}
inline void GameFinish::_internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fognum_ = value;
}
inline void GameFinish::set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fognum(value);
  // @@protoc_insertion_point(field_set:GameFinish.fogNum)
}

// int32 witchNum = 8;
inline void GameFinish::clear_witchnum() {
  witchnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_witchnum() const {
  return witchnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::witchnum() const {
  // @@protoc_insertion_point(field_get:GameFinish.witchNum)
  return _internal_witchnum();
}
inline void GameFinish::_internal_set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witchnum_ = value;
}
inline void GameFinish::set_witchnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witchnum(value);
  // @@protoc_insertion_point(field_set:GameFinish.witchNum)
}

// int32 gameScore = 9;
inline void GameFinish::clear_gamescore() {
  gamescore_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::_internal_gamescore() const {
  return gamescore_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameFinish::gamescore() const {
  // @@protoc_insertion_point(field_get:GameFinish.gameScore)
  return _internal_gamescore();
}
inline void GameFinish::_internal_set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gamescore_ = value;
}
inline void GameFinish::set_gamescore(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gamescore(value);
  // @@protoc_insertion_point(field_set:GameFinish.gameScore)
}

// -------------------------------------------------------------------

// CandleCardFeedback

// int32 waterNum = 1;
inline void CandleCardFeedback::clear_waternum() {
  waternum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_waternum() const {
  return waternum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::waternum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.waterNum)
  return _internal_waternum();
}
inline void CandleCardFeedback::_internal_set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  waternum_ = value;
}
inline void CandleCardFeedback::set_waternum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_waternum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.waterNum)
}

// int32 fireNum = 2;
inline void CandleCardFeedback::clear_firenum() {
  firenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_firenum() const {
  return firenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::firenum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.fireNum)
  return _internal_firenum();
}
inline void CandleCardFeedback::_internal_set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firenum_ = value;
}
inline void CandleCardFeedback::set_firenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_firenum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.fireNum)
}

// int32 lightNum = 3;
inline void CandleCardFeedback::clear_lightnum() {
  lightnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_lightnum() const {
  return lightnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::lightnum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.lightNum)
  return _internal_lightnum();
}
inline void CandleCardFeedback::_internal_set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lightnum_ = value;
}
inline void CandleCardFeedback::set_lightnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lightnum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.lightNum)
}

// int32 candleNum = 4;
inline void CandleCardFeedback::clear_candlenum() {
  candlenum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_candlenum() const {
  return candlenum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::candlenum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.candleNum)
  return _internal_candlenum();
}
inline void CandleCardFeedback::_internal_set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  candlenum_ = value;
}
inline void CandleCardFeedback::set_candlenum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_candlenum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.candleNum)
}

// int32 woodNum = 5;
inline void CandleCardFeedback::clear_woodnum() {
  woodnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_woodnum() const {
  return woodnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::woodnum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.woodNum)
  return _internal_woodnum();
}
inline void CandleCardFeedback::_internal_set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  woodnum_ = value;
}
inline void CandleCardFeedback::set_woodnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_woodnum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.woodNum)
}

// int32 fogNum = 6;
inline void CandleCardFeedback::clear_fognum() {
  fognum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::_internal_fognum() const {
  return fognum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CandleCardFeedback::fognum() const {
  // @@protoc_insertion_point(field_get:CandleCardFeedback.fogNum)
  return _internal_fognum();
}
inline void CandleCardFeedback::_internal_set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fognum_ = value;
}
inline void CandleCardFeedback::set_fognum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fognum(value);
  // @@protoc_insertion_point(field_set:CandleCardFeedback.fogNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PlayerOperation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerOperation_OperationType>() {
  return ::PlayerOperation_OperationType_descriptor();
}
template <> struct is_proto_enum< ::PlayerOperation_CardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlayerOperation_CardType>() {
  return ::PlayerOperation_CardType_descriptor();
}
template <> struct is_proto_enum< ::OtherPlayerInfo_PlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::OtherPlayerInfo_PlayerStatus>() {
  return ::OtherPlayerInfo_PlayerStatus_descriptor();
}
template <> struct is_proto_enum< ::LocalPlayerInfo_PlayerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LocalPlayerInfo_PlayerStatus>() {
  return ::LocalPlayerInfo_PlayerStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameContent_2eproto
