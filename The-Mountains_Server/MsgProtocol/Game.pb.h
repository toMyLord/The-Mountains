// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
class AcceptOrRefuse;
class AcceptOrRefuseDefaultTypeInternal;
extern AcceptOrRefuseDefaultTypeInternal _AcceptOrRefuse_default_instance_;
class EditUserInfo;
class EditUserInfoDefaultTypeInternal;
extern EditUserInfoDefaultTypeInternal _EditUserInfo_default_instance_;
class EditUserInfoFeedback;
class EditUserInfoFeedbackDefaultTypeInternal;
extern EditUserInfoFeedbackDefaultTypeInternal _EditUserInfoFeedback_default_instance_;
class MatchSwitchApplication;
class MatchSwitchApplicationDefaultTypeInternal;
extern MatchSwitchApplicationDefaultTypeInternal _MatchSwitchApplication_default_instance_;
class UserInfoToGameServer;
class UserInfoToGameServerDefaultTypeInternal;
extern UserInfoToGameServerDefaultTypeInternal _UserInfoToGameServer_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AcceptOrRefuse* Arena::CreateMaybeMessage<::AcceptOrRefuse>(Arena*);
template<> ::EditUserInfo* Arena::CreateMaybeMessage<::EditUserInfo>(Arena*);
template<> ::EditUserInfoFeedback* Arena::CreateMaybeMessage<::EditUserInfoFeedback>(Arena*);
template<> ::MatchSwitchApplication* Arena::CreateMaybeMessage<::MatchSwitchApplication>(Arena*);
template<> ::UserInfoToGameServer* Arena::CreateMaybeMessage<::UserInfoToGameServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class UserInfoToGameServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UserInfoToGameServer) */ {
 public:
  UserInfoToGameServer();
  virtual ~UserInfoToGameServer();

  UserInfoToGameServer(const UserInfoToGameServer& from);
  UserInfoToGameServer(UserInfoToGameServer&& from) noexcept
    : UserInfoToGameServer() {
    *this = ::std::move(from);
  }

  inline UserInfoToGameServer& operator=(const UserInfoToGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfoToGameServer& operator=(UserInfoToGameServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfoToGameServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfoToGameServer* internal_default_instance() {
    return reinterpret_cast<const UserInfoToGameServer*>(
               &_UserInfoToGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserInfoToGameServer& a, UserInfoToGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfoToGameServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfoToGameServer* New() const final {
    return CreateMaybeMessage<UserInfoToGameServer>(nullptr);
  }

  UserInfoToGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfoToGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfoToGameServer& from);
  void MergeFrom(const UserInfoToGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfoToGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UserInfoToGameServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseridFieldNumber = 1,
  };
  // int32 userid = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:UserInfoToGameServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class EditUserInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditUserInfo) */ {
 public:
  EditUserInfo();
  virtual ~EditUserInfo();

  EditUserInfo(const EditUserInfo& from);
  EditUserInfo(EditUserInfo&& from) noexcept
    : EditUserInfo() {
    *this = ::std::move(from);
  }

  inline EditUserInfo& operator=(const EditUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditUserInfo& operator=(EditUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EditUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditUserInfo* internal_default_instance() {
    return reinterpret_cast<const EditUserInfo*>(
               &_EditUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EditUserInfo& a, EditUserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EditUserInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EditUserInfo* New() const final {
    return CreateMaybeMessage<EditUserInfo>(nullptr);
  }

  EditUserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EditUserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EditUserInfo& from);
  void MergeFrom(const EditUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditUserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditUserInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewUserNameFieldNumber = 1,
  };
  // string newUserName = 1;
  void clear_newusername();
  const std::string& newusername() const;
  void set_newusername(const std::string& value);
  void set_newusername(std::string&& value);
  void set_newusername(const char* value);
  void set_newusername(const char* value, size_t size);
  std::string* mutable_newusername();
  std::string* release_newusername();
  void set_allocated_newusername(std::string* newusername);
  private:
  const std::string& _internal_newusername() const;
  void _internal_set_newusername(const std::string& value);
  std::string* _internal_mutable_newusername();
  public:

  // @@protoc_insertion_point(class_scope:EditUserInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr newusername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class MatchSwitchApplication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MatchSwitchApplication) */ {
 public:
  MatchSwitchApplication();
  virtual ~MatchSwitchApplication();

  MatchSwitchApplication(const MatchSwitchApplication& from);
  MatchSwitchApplication(MatchSwitchApplication&& from) noexcept
    : MatchSwitchApplication() {
    *this = ::std::move(from);
  }

  inline MatchSwitchApplication& operator=(const MatchSwitchApplication& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchSwitchApplication& operator=(MatchSwitchApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchSwitchApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchSwitchApplication* internal_default_instance() {
    return reinterpret_cast<const MatchSwitchApplication*>(
               &_MatchSwitchApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MatchSwitchApplication& a, MatchSwitchApplication& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchSwitchApplication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchSwitchApplication* New() const final {
    return CreateMaybeMessage<MatchSwitchApplication>(nullptr);
  }

  MatchSwitchApplication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchSwitchApplication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchSwitchApplication& from);
  void MergeFrom(const MatchSwitchApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchSwitchApplication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MatchSwitchApplication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonNumFieldNumber = 1,
  };
  // int32 personNum = 1;
  void clear_personnum();
  ::PROTOBUF_NAMESPACE_ID::int32 personnum() const;
  void set_personnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_personnum() const;
  void _internal_set_personnum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MatchSwitchApplication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 personnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class AcceptOrRefuse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AcceptOrRefuse) */ {
 public:
  AcceptOrRefuse();
  virtual ~AcceptOrRefuse();

  AcceptOrRefuse(const AcceptOrRefuse& from);
  AcceptOrRefuse(AcceptOrRefuse&& from) noexcept
    : AcceptOrRefuse() {
    *this = ::std::move(from);
  }

  inline AcceptOrRefuse& operator=(const AcceptOrRefuse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptOrRefuse& operator=(AcceptOrRefuse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcceptOrRefuse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceptOrRefuse* internal_default_instance() {
    return reinterpret_cast<const AcceptOrRefuse*>(
               &_AcceptOrRefuse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcceptOrRefuse& a, AcceptOrRefuse& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptOrRefuse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcceptOrRefuse* New() const final {
    return CreateMaybeMessage<AcceptOrRefuse>(nullptr);
  }

  AcceptOrRefuse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcceptOrRefuse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcceptOrRefuse& from);
  void MergeFrom(const AcceptOrRefuse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptOrRefuse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AcceptOrRefuse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsAcceptFieldNumber = 1,
  };
  // bool isAccept = 1;
  void clear_isaccept();
  bool isaccept() const;
  void set_isaccept(bool value);
  private:
  bool _internal_isaccept() const;
  void _internal_set_isaccept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AcceptOrRefuse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool isaccept_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// -------------------------------------------------------------------

class EditUserInfoFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EditUserInfoFeedback) */ {
 public:
  EditUserInfoFeedback();
  virtual ~EditUserInfoFeedback();

  EditUserInfoFeedback(const EditUserInfoFeedback& from);
  EditUserInfoFeedback(EditUserInfoFeedback&& from) noexcept
    : EditUserInfoFeedback() {
    *this = ::std::move(from);
  }

  inline EditUserInfoFeedback& operator=(const EditUserInfoFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditUserInfoFeedback& operator=(EditUserInfoFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EditUserInfoFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EditUserInfoFeedback* internal_default_instance() {
    return reinterpret_cast<const EditUserInfoFeedback*>(
               &_EditUserInfoFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EditUserInfoFeedback& a, EditUserInfoFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(EditUserInfoFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EditUserInfoFeedback* New() const final {
    return CreateMaybeMessage<EditUserInfoFeedback>(nullptr);
  }

  EditUserInfoFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EditUserInfoFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EditUserInfoFeedback& from);
  void MergeFrom(const EditUserInfoFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditUserInfoFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EditUserInfoFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessEditFieldNumber = 1,
  };
  // bool isSuccessEdit = 1;
  void clear_issuccessedit();
  bool issuccessedit() const;
  void set_issuccessedit(bool value);
  private:
  bool _internal_issuccessedit() const;
  void _internal_set_issuccessedit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EditUserInfoFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool issuccessedit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfoToGameServer

// int32 userid = 1;
inline void UserInfoToGameServer::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoToGameServer::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserInfoToGameServer::userid() const {
  // @@protoc_insertion_point(field_get:UserInfoToGameServer.userid)
  return _internal_userid();
}
inline void UserInfoToGameServer::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void UserInfoToGameServer::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:UserInfoToGameServer.userid)
}

// -------------------------------------------------------------------

// EditUserInfo

// string newUserName = 1;
inline void EditUserInfo::clear_newusername() {
  newusername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EditUserInfo::newusername() const {
  // @@protoc_insertion_point(field_get:EditUserInfo.newUserName)
  return _internal_newusername();
}
inline void EditUserInfo::set_newusername(const std::string& value) {
  _internal_set_newusername(value);
  // @@protoc_insertion_point(field_set:EditUserInfo.newUserName)
}
inline std::string* EditUserInfo::mutable_newusername() {
  // @@protoc_insertion_point(field_mutable:EditUserInfo.newUserName)
  return _internal_mutable_newusername();
}
inline const std::string& EditUserInfo::_internal_newusername() const {
  return newusername_.GetNoArena();
}
inline void EditUserInfo::_internal_set_newusername(const std::string& value) {
  
  newusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EditUserInfo::set_newusername(std::string&& value) {
  
  newusername_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EditUserInfo.newUserName)
}
inline void EditUserInfo::set_newusername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  newusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EditUserInfo.newUserName)
}
inline void EditUserInfo::set_newusername(const char* value, size_t size) {
  
  newusername_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EditUserInfo.newUserName)
}
inline std::string* EditUserInfo::_internal_mutable_newusername() {
  
  return newusername_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EditUserInfo::release_newusername() {
  // @@protoc_insertion_point(field_release:EditUserInfo.newUserName)
  
  return newusername_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EditUserInfo::set_allocated_newusername(std::string* newusername) {
  if (newusername != nullptr) {
    
  } else {
    
  }
  newusername_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), newusername);
  // @@protoc_insertion_point(field_set_allocated:EditUserInfo.newUserName)
}

// -------------------------------------------------------------------

// MatchSwitchApplication

// int32 personNum = 1;
inline void MatchSwitchApplication::clear_personnum() {
  personnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSwitchApplication::_internal_personnum() const {
  return personnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchSwitchApplication::personnum() const {
  // @@protoc_insertion_point(field_get:MatchSwitchApplication.personNum)
  return _internal_personnum();
}
inline void MatchSwitchApplication::_internal_set_personnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  personnum_ = value;
}
inline void MatchSwitchApplication::set_personnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_personnum(value);
  // @@protoc_insertion_point(field_set:MatchSwitchApplication.personNum)
}

// -------------------------------------------------------------------

// AcceptOrRefuse

// bool isAccept = 1;
inline void AcceptOrRefuse::clear_isaccept() {
  isaccept_ = false;
}
inline bool AcceptOrRefuse::_internal_isaccept() const {
  return isaccept_;
}
inline bool AcceptOrRefuse::isaccept() const {
  // @@protoc_insertion_point(field_get:AcceptOrRefuse.isAccept)
  return _internal_isaccept();
}
inline void AcceptOrRefuse::_internal_set_isaccept(bool value) {
  
  isaccept_ = value;
}
inline void AcceptOrRefuse::set_isaccept(bool value) {
  _internal_set_isaccept(value);
  // @@protoc_insertion_point(field_set:AcceptOrRefuse.isAccept)
}

// -------------------------------------------------------------------

// EditUserInfoFeedback

// bool isSuccessEdit = 1;
inline void EditUserInfoFeedback::clear_issuccessedit() {
  issuccessedit_ = false;
}
inline bool EditUserInfoFeedback::_internal_issuccessedit() const {
  return issuccessedit_;
}
inline bool EditUserInfoFeedback::issuccessedit() const {
  // @@protoc_insertion_point(field_get:EditUserInfoFeedback.isSuccessEdit)
  return _internal_issuccessedit();
}
inline void EditUserInfoFeedback::_internal_set_issuccessedit(bool value) {
  
  issuccessedit_ = value;
}
inline void EditUserInfoFeedback::set_issuccessedit(bool value) {
  _internal_set_issuccessedit(value);
  // @@protoc_insertion_point(field_set:EditUserInfoFeedback.isSuccessEdit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
