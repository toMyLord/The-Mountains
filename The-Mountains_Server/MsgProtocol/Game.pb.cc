// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#include "Game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class UserInfoToGameServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfoToGameServer> _instance;
} _UserInfoToGameServer_default_instance_;
class EditUserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditUserInfo> _instance;
} _EditUserInfo_default_instance_;
class MatchSwitchApplicationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchSwitchApplication> _instance;
} _MatchSwitchApplication_default_instance_;
class AcceptOrRefuseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcceptOrRefuse> _instance;
} _AcceptOrRefuse_default_instance_;
class EditUserInfoFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EditUserInfoFeedback> _instance;
} _EditUserInfoFeedback_default_instance_;
static void InitDefaultsscc_info_AcceptOrRefuse_Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AcceptOrRefuse_default_instance_;
    new (ptr) ::AcceptOrRefuse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AcceptOrRefuse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcceptOrRefuse_Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcceptOrRefuse_Game_2eproto}, {}};

static void InitDefaultsscc_info_EditUserInfo_Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EditUserInfo_default_instance_;
    new (ptr) ::EditUserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EditUserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EditUserInfo_Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EditUserInfo_Game_2eproto}, {}};

static void InitDefaultsscc_info_EditUserInfoFeedback_Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EditUserInfoFeedback_default_instance_;
    new (ptr) ::EditUserInfoFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EditUserInfoFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EditUserInfoFeedback_Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EditUserInfoFeedback_Game_2eproto}, {}};

static void InitDefaultsscc_info_MatchSwitchApplication_Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MatchSwitchApplication_default_instance_;
    new (ptr) ::MatchSwitchApplication();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MatchSwitchApplication::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchSwitchApplication_Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchSwitchApplication_Game_2eproto}, {}};

static void InitDefaultsscc_info_UserInfoToGameServer_Game_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UserInfoToGameServer_default_instance_;
    new (ptr) ::UserInfoToGameServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UserInfoToGameServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfoToGameServer_Game_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfoToGameServer_Game_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Game_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Game_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Game_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Game_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UserInfoToGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UserInfoToGameServer, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EditUserInfo, newusername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MatchSwitchApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MatchSwitchApplication, personnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AcceptOrRefuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AcceptOrRefuse, isaccept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EditUserInfoFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EditUserInfoFeedback, issuccessedit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::UserInfoToGameServer)},
  { 6, -1, sizeof(::EditUserInfo)},
  { 12, -1, sizeof(::MatchSwitchApplication)},
  { 18, -1, sizeof(::AcceptOrRefuse)},
  { 24, -1, sizeof(::EditUserInfoFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UserInfoToGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EditUserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MatchSwitchApplication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AcceptOrRefuse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EditUserInfoFeedback_default_instance_),
};

const char descriptor_table_protodef_Game_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nGame.proto\"&\n\024UserInfoToGameServer\022\016\n\006"
  "userid\030\001 \001(\005\"#\n\014EditUserInfo\022\023\n\013newUserN"
  "ame\030\001 \001(\t\"+\n\026MatchSwitchApplication\022\021\n\tp"
  "ersonNum\030\001 \001(\005\"\"\n\016AcceptOrRefuse\022\020\n\010isAc"
  "cept\030\001 \001(\010\"-\n\024EditUserInfoFeedback\022\025\n\ris"
  "SuccessEdit\030\001 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Game_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Game_2eproto_sccs[5] = {
  &scc_info_AcceptOrRefuse_Game_2eproto.base,
  &scc_info_EditUserInfo_Game_2eproto.base,
  &scc_info_EditUserInfoFeedback_Game_2eproto.base,
  &scc_info_MatchSwitchApplication_Game_2eproto.base,
  &scc_info_UserInfoToGameServer_Game_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Game_2eproto_once;
static bool descriptor_table_Game_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto = {
  &descriptor_table_Game_2eproto_initialized, descriptor_table_protodef_Game_2eproto, "Game.proto", 225,
  &descriptor_table_Game_2eproto_once, descriptor_table_Game_2eproto_sccs, descriptor_table_Game_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_Game_2eproto::offsets,
  file_level_metadata_Game_2eproto, 5, file_level_enum_descriptors_Game_2eproto, file_level_service_descriptors_Game_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Game_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Game_2eproto), true);

// ===================================================================

void UserInfoToGameServer::InitAsDefaultInstance() {
}
class UserInfoToGameServer::_Internal {
 public:
};

UserInfoToGameServer::UserInfoToGameServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserInfoToGameServer)
}
UserInfoToGameServer::UserInfoToGameServer(const UserInfoToGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_ = from.userid_;
  // @@protoc_insertion_point(copy_constructor:UserInfoToGameServer)
}

void UserInfoToGameServer::SharedCtor() {
  userid_ = 0;
}

UserInfoToGameServer::~UserInfoToGameServer() {
  // @@protoc_insertion_point(destructor:UserInfoToGameServer)
  SharedDtor();
}

void UserInfoToGameServer::SharedDtor() {
}

void UserInfoToGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfoToGameServer& UserInfoToGameServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfoToGameServer_Game_2eproto.base);
  return *internal_default_instance();
}


void UserInfoToGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:UserInfoToGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_ = 0;
  _internal_metadata_.Clear();
}

const char* UserInfoToGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfoToGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserInfoToGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserInfoToGameServer)
  return target;
}

size_t UserInfoToGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserInfoToGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 userid = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfoToGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UserInfoToGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfoToGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfoToGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UserInfoToGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UserInfoToGameServer)
    MergeFrom(*source);
  }
}

void UserInfoToGameServer::MergeFrom(const UserInfoToGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UserInfoToGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void UserInfoToGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UserInfoToGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoToGameServer::CopyFrom(const UserInfoToGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserInfoToGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoToGameServer::IsInitialized() const {
  return true;
}

void UserInfoToGameServer::InternalSwap(UserInfoToGameServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(userid_, other->userid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfoToGameServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditUserInfo::InitAsDefaultInstance() {
}
class EditUserInfo::_Internal {
 public:
};

EditUserInfo::EditUserInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EditUserInfo)
}
EditUserInfo::EditUserInfo(const EditUserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  newusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_newusername().empty()) {
    newusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newusername_);
  }
  // @@protoc_insertion_point(copy_constructor:EditUserInfo)
}

void EditUserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EditUserInfo_Game_2eproto.base);
  newusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

EditUserInfo::~EditUserInfo() {
  // @@protoc_insertion_point(destructor:EditUserInfo)
  SharedDtor();
}

void EditUserInfo::SharedDtor() {
  newusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EditUserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditUserInfo& EditUserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditUserInfo_Game_2eproto.base);
  return *internal_default_instance();
}


void EditUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EditUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  newusername_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* EditUserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string newUserName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_newusername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EditUserInfo.newUserName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditUserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditUserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string newUserName = 1;
  if (this->newusername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newusername().data(), static_cast<int>(this->_internal_newusername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EditUserInfo.newUserName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newusername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditUserInfo)
  return target;
}

size_t EditUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditUserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string newUserName = 1;
  if (this->newusername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newusername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditUserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EditUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EditUserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditUserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EditUserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EditUserInfo)
    MergeFrom(*source);
  }
}

void EditUserInfo::MergeFrom(const EditUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EditUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.newusername().size() > 0) {

    newusername_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.newusername_);
  }
}

void EditUserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EditUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditUserInfo::CopyFrom(const EditUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditUserInfo::IsInitialized() const {
  return true;
}

void EditUserInfo::InternalSwap(EditUserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  newusername_.Swap(&other->newusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata EditUserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchSwitchApplication::InitAsDefaultInstance() {
}
class MatchSwitchApplication::_Internal {
 public:
};

MatchSwitchApplication::MatchSwitchApplication()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MatchSwitchApplication)
}
MatchSwitchApplication::MatchSwitchApplication(const MatchSwitchApplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  personnum_ = from.personnum_;
  // @@protoc_insertion_point(copy_constructor:MatchSwitchApplication)
}

void MatchSwitchApplication::SharedCtor() {
  personnum_ = 0;
}

MatchSwitchApplication::~MatchSwitchApplication() {
  // @@protoc_insertion_point(destructor:MatchSwitchApplication)
  SharedDtor();
}

void MatchSwitchApplication::SharedDtor() {
}

void MatchSwitchApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchSwitchApplication& MatchSwitchApplication::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchSwitchApplication_Game_2eproto.base);
  return *internal_default_instance();
}


void MatchSwitchApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:MatchSwitchApplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  personnum_ = 0;
  _internal_metadata_.Clear();
}

const char* MatchSwitchApplication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 personNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          personnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchSwitchApplication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MatchSwitchApplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 personNum = 1;
  if (this->personnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_personnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MatchSwitchApplication)
  return target;
}

size_t MatchSwitchApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MatchSwitchApplication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 personNum = 1;
  if (this->personnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_personnum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchSwitchApplication::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MatchSwitchApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchSwitchApplication* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchSwitchApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MatchSwitchApplication)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MatchSwitchApplication)
    MergeFrom(*source);
  }
}

void MatchSwitchApplication::MergeFrom(const MatchSwitchApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MatchSwitchApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.personnum() != 0) {
    _internal_set_personnum(from._internal_personnum());
  }
}

void MatchSwitchApplication::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MatchSwitchApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchSwitchApplication::CopyFrom(const MatchSwitchApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MatchSwitchApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchSwitchApplication::IsInitialized() const {
  return true;
}

void MatchSwitchApplication::InternalSwap(MatchSwitchApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(personnum_, other->personnum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchSwitchApplication::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcceptOrRefuse::InitAsDefaultInstance() {
}
class AcceptOrRefuse::_Internal {
 public:
};

AcceptOrRefuse::AcceptOrRefuse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AcceptOrRefuse)
}
AcceptOrRefuse::AcceptOrRefuse(const AcceptOrRefuse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isaccept_ = from.isaccept_;
  // @@protoc_insertion_point(copy_constructor:AcceptOrRefuse)
}

void AcceptOrRefuse::SharedCtor() {
  isaccept_ = false;
}

AcceptOrRefuse::~AcceptOrRefuse() {
  // @@protoc_insertion_point(destructor:AcceptOrRefuse)
  SharedDtor();
}

void AcceptOrRefuse::SharedDtor() {
}

void AcceptOrRefuse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcceptOrRefuse& AcceptOrRefuse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcceptOrRefuse_Game_2eproto.base);
  return *internal_default_instance();
}


void AcceptOrRefuse::Clear() {
// @@protoc_insertion_point(message_clear_start:AcceptOrRefuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isaccept_ = false;
  _internal_metadata_.Clear();
}

const char* AcceptOrRefuse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isAccept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isaccept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcceptOrRefuse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AcceptOrRefuse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isAccept = 1;
  if (this->isaccept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isaccept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AcceptOrRefuse)
  return target;
}

size_t AcceptOrRefuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AcceptOrRefuse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isAccept = 1;
  if (this->isaccept() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcceptOrRefuse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AcceptOrRefuse)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptOrRefuse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcceptOrRefuse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AcceptOrRefuse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AcceptOrRefuse)
    MergeFrom(*source);
  }
}

void AcceptOrRefuse::MergeFrom(const AcceptOrRefuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AcceptOrRefuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isaccept() != 0) {
    _internal_set_isaccept(from._internal_isaccept());
  }
}

void AcceptOrRefuse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AcceptOrRefuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptOrRefuse::CopyFrom(const AcceptOrRefuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AcceptOrRefuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptOrRefuse::IsInitialized() const {
  return true;
}

void AcceptOrRefuse::InternalSwap(AcceptOrRefuse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isaccept_, other->isaccept_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptOrRefuse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EditUserInfoFeedback::InitAsDefaultInstance() {
}
class EditUserInfoFeedback::_Internal {
 public:
};

EditUserInfoFeedback::EditUserInfoFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EditUserInfoFeedback)
}
EditUserInfoFeedback::EditUserInfoFeedback(const EditUserInfoFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuccessedit_ = from.issuccessedit_;
  // @@protoc_insertion_point(copy_constructor:EditUserInfoFeedback)
}

void EditUserInfoFeedback::SharedCtor() {
  issuccessedit_ = false;
}

EditUserInfoFeedback::~EditUserInfoFeedback() {
  // @@protoc_insertion_point(destructor:EditUserInfoFeedback)
  SharedDtor();
}

void EditUserInfoFeedback::SharedDtor() {
}

void EditUserInfoFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EditUserInfoFeedback& EditUserInfoFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EditUserInfoFeedback_Game_2eproto.base);
  return *internal_default_instance();
}


void EditUserInfoFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:EditUserInfoFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  issuccessedit_ = false;
  _internal_metadata_.Clear();
}

const char* EditUserInfoFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isSuccessEdit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          issuccessedit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditUserInfoFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EditUserInfoFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isSuccessEdit = 1;
  if (this->issuccessedit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_issuccessedit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EditUserInfoFeedback)
  return target;
}

size_t EditUserInfoFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EditUserInfoFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isSuccessEdit = 1;
  if (this->issuccessedit() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditUserInfoFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EditUserInfoFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const EditUserInfoFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditUserInfoFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EditUserInfoFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EditUserInfoFeedback)
    MergeFrom(*source);
  }
}

void EditUserInfoFeedback::MergeFrom(const EditUserInfoFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EditUserInfoFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issuccessedit() != 0) {
    _internal_set_issuccessedit(from._internal_issuccessedit());
  }
}

void EditUserInfoFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EditUserInfoFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditUserInfoFeedback::CopyFrom(const EditUserInfoFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EditUserInfoFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditUserInfoFeedback::IsInitialized() const {
  return true;
}

void EditUserInfoFeedback::InternalSwap(EditUserInfoFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(issuccessedit_, other->issuccessedit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditUserInfoFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::UserInfoToGameServer* Arena::CreateMaybeMessage< ::UserInfoToGameServer >(Arena* arena) {
  return Arena::CreateInternal< ::UserInfoToGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::EditUserInfo* Arena::CreateMaybeMessage< ::EditUserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::EditUserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::MatchSwitchApplication* Arena::CreateMaybeMessage< ::MatchSwitchApplication >(Arena* arena) {
  return Arena::CreateInternal< ::MatchSwitchApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::AcceptOrRefuse* Arena::CreateMaybeMessage< ::AcceptOrRefuse >(Arena* arena) {
  return Arena::CreateInternal< ::AcceptOrRefuse >(arena);
}
template<> PROTOBUF_NOINLINE ::EditUserInfoFeedback* Arena::CreateMaybeMessage< ::EditUserInfoFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::EditUserInfoFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
