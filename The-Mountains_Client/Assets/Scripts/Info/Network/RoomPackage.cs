// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RoomPackage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from RoomPackage.proto</summary>
public static partial class RoomPackageReflection {

  #region Descriptor
  /// <summary>File descriptor for RoomPackage.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoomPackageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFSb29tUGFja2FnZS5wcm90byKUAgoPUGxheWVyT3BlcmF0aW9uEg8KB3Nl",
          "YXROdW0YASABKAUSMQoJb3BlcmF0aW9uGAIgASgOMh4uUGxheWVyT3BlcmF0",
          "aW9uLk9wZXJhdGlvblR5cGUSJwoEY2FyZBgDIAEoDjIZLlBsYXllck9wZXJh",
          "dGlvbi5DYXJkVHlwZSI+Cg1PcGVyYXRpb25UeXBlEgwKCENvbXBvdW5kEAAS",
          "DAoIVHJhbnNmZXIQARIHCgNVc2UQAhIICgRTa2lwEAMiVAoIQ2FyZFR5cGUS",
          "CQoFV2F0ZXIQABIICgRGaXJlEAESCQoFTGlnaHQQAhIKCgZDYW5kbGUQAxII",
          "CgRXb29kEAQSBwoDRm9nEAUSCQoFV2l0Y2gQBiKBAQoIUm9vbUluZm8SDgoG",
          "cm9vbUlEGAEgASgFEgwKBHRpbWUYAiABKAUSEQoJcGxheWVyTnVtGAMgASgF",
          "EhEKCWNhbmRsZU51bRgEIAEoBRIPCgd3b29kTnVtGAUgASgFEg4KBmZvZ051",
          "bRgGIAEoBRIQCgh3aXRjaE51bRgHIAEoBSLKAQoPT3RoZXJQbGF5ZXJJbmZv",
          "EgwKBG5hbWUYASABKAkSDQoFc2NvcmUYAiABKAUSDwoHc2VhdE51bRgDIAEo",
          "BRIPCgdjYXJkTnVtGAQgASgFEhAKCHdpdGNoTnVtGAUgASgFEjcKEEN1cnJQ",
          "bGF5ZXJTdGF0dXMYBiABKA4yHS5PdGhlclBsYXllckluZm8uUGxheWVyU3Rh",
          "dHVzIi0KDFBsYXllclN0YXR1cxIKCgZOb3JtYWwQABIICgRXb29kEAESBwoD",
          "Rm9nEAIilgIKD0xvY2FsUGxheWVySW5mbxIPCgdjYXJkTnVtGAEgASgFEhAK",
          "CHdhdGVyTnVtGAIgASgFEg8KB2ZpcmVOdW0YAyABKAUSEAoIbGlnaHROdW0Y",
          "BCABKAUSEQoJY2FuZGxlTnVtGAUgASgFEg8KB3dvb2ROdW0YBiABKAUSDgoG",
          "Zm9nTnVtGAcgASgFEhAKCHdpdGNoTnVtGAggASgFEjcKEEN1cnJQbGF5ZXJT",
          "dGF0dXMYCSABKA4yHS5Mb2NhbFBsYXllckluZm8uUGxheWVyU3RhdHVzEg8K",
          "B3NlYXROdW0YCiABKAUiLQoMUGxheWVyU3RhdHVzEgoKBk5vcm1hbBAAEggK",
          "BFdvb2QQARIHCgNGb2cQAiKrAQoKR2FtZUZpbmlzaBIPCgdzZWF0TnVtGAEg",
          "ASgFEhAKCHdhdGVyTnVtGAIgASgFEg8KB2ZpcmVOdW0YAyABKAUSEAoIbGln",
          "aHROdW0YBCABKAUSEQoJY2FuZGxlTnVtGAUgASgFEg8KB3dvb2ROdW0YBiAB",
          "KAUSDgoGZm9nTnVtGAcgASgFEhAKCHdpdGNoTnVtGAggASgFEhEKCWdhbWVT",
          "Y29yZRgJIAEoBSKOAQoSQ2FuZGxlQ2FyZEZlZWRiYWNrEhAKCHdhdGVyTnVt",
          "GAEgASgFEg8KB2ZpcmVOdW0YAiABKAUSEAoIbGlnaHROdW0YAyABKAUSEQoJ",
          "Y2FuZGxlTnVtGAQgASgFEg8KB3dvb2ROdW0YBSABKAUSDgoGZm9nTnVtGAYg",
          "ASgFEg8KB3NlYXROdW0YByABKAUiIgoPT2ZmTGluZU9yT25MaW5lEg8KB3Nl",
          "YXROdW0YASABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerOperation), global::PlayerOperation.Parser, new[]{ "SeatNum", "Operation", "Card" }, null, new[]{ typeof(global::PlayerOperation.Types.OperationType), typeof(global::PlayerOperation.Types.CardType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomInfo), global::RoomInfo.Parser, new[]{ "RoomID", "Time", "PlayerNum", "CandleNum", "WoodNum", "FogNum", "WitchNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OtherPlayerInfo), global::OtherPlayerInfo.Parser, new[]{ "Name", "Score", "SeatNum", "CardNum", "WitchNum", "CurrPlayerStatus" }, null, new[]{ typeof(global::OtherPlayerInfo.Types.PlayerStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LocalPlayerInfo), global::LocalPlayerInfo.Parser, new[]{ "CardNum", "WaterNum", "FireNum", "LightNum", "CandleNum", "WoodNum", "FogNum", "WitchNum", "CurrPlayerStatus", "SeatNum" }, null, new[]{ typeof(global::LocalPlayerInfo.Types.PlayerStatus) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GameFinish), global::GameFinish.Parser, new[]{ "SeatNum", "WaterNum", "FireNum", "LightNum", "CandleNum", "WoodNum", "FogNum", "WitchNum", "GameScore" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CandleCardFeedback), global::CandleCardFeedback.Parser, new[]{ "WaterNum", "FireNum", "LightNum", "CandleNum", "WoodNum", "FogNum", "SeatNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OffLineOrOnLine), global::OffLineOrOnLine.Parser, new[]{ "SeatNum" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class PlayerOperation : pb::IMessage<PlayerOperation> {
  private static readonly pb::MessageParser<PlayerOperation> _parser = new pb::MessageParser<PlayerOperation>(() => new PlayerOperation());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerOperation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOperation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOperation(PlayerOperation other) : this() {
    seatNum_ = other.seatNum_;
    operation_ = other.operation_;
    card_ = other.card_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerOperation Clone() {
    return new PlayerOperation(this);
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 1;
  private int seatNum_;
  /// <summary>
  ///进行该操作的玩家座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  /// <summary>Field number for the "operation" field.</summary>
  public const int OperationFieldNumber = 2;
  private global::PlayerOperation.Types.OperationType operation_ = global::PlayerOperation.Types.OperationType.Compound;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerOperation.Types.OperationType Operation {
    get { return operation_; }
    set {
      operation_ = value;
    }
  }

  /// <summary>Field number for the "card" field.</summary>
  public const int CardFieldNumber = 3;
  private global::PlayerOperation.Types.CardType card_ = global::PlayerOperation.Types.CardType.Water;
  /// <summary>
  ///要合成的卡牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerOperation.Types.CardType Card {
    get { return card_; }
    set {
      card_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerOperation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerOperation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatNum != other.SeatNum) return false;
    if (Operation != other.Operation) return false;
    if (Card != other.Card) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (Operation != global::PlayerOperation.Types.OperationType.Compound) hash ^= Operation.GetHashCode();
    if (Card != global::PlayerOperation.Types.CardType.Water) hash ^= Card.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatNum);
    }
    if (Operation != global::PlayerOperation.Types.OperationType.Compound) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Operation);
    }
    if (Card != global::PlayerOperation.Types.CardType.Water) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Card);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (Operation != global::PlayerOperation.Types.OperationType.Compound) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
    }
    if (Card != global::PlayerOperation.Types.CardType.Water) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Card);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerOperation other) {
    if (other == null) {
      return;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    if (other.Operation != global::PlayerOperation.Types.OperationType.Compound) {
      Operation = other.Operation;
    }
    if (other.Card != global::PlayerOperation.Types.CardType.Water) {
      Card = other.Card;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SeatNum = input.ReadInt32();
          break;
        }
        case 16: {
          Operation = (global::PlayerOperation.Types.OperationType) input.ReadEnum();
          break;
        }
        case 24: {
          Card = (global::PlayerOperation.Types.CardType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PlayerOperation message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum OperationType {
      [pbr::OriginalName("Compound")] Compound = 0,
      [pbr::OriginalName("Transfer")] Transfer = 1,
      [pbr::OriginalName("Use")] Use = 2,
      /// <summary>
      ///跳过本回合
      /// </summary>
      [pbr::OriginalName("Skip")] Skip = 3,
    }

    public enum CardType {
      [pbr::OriginalName("Water")] Water = 0,
      [pbr::OriginalName("Fire")] Fire = 1,
      [pbr::OriginalName("Light")] Light = 2,
      [pbr::OriginalName("Candle")] Candle = 3,
      [pbr::OriginalName("Wood")] Wood = 4,
      [pbr::OriginalName("Fog")] Fog = 5,
      [pbr::OriginalName("Witch")] Witch = 6,
    }

  }
  #endregion

}

/// <summary>
///Server to Client	
/// </summary>
public sealed partial class RoomInfo : pb::IMessage<RoomInfo> {
  private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => new RoomInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo(RoomInfo other) : this() {
    roomID_ = other.roomID_;
    time_ = other.time_;
    playerNum_ = other.playerNum_;
    candleNum_ = other.candleNum_;
    woodNum_ = other.woodNum_;
    fogNum_ = other.fogNum_;
    witchNum_ = other.witchNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo Clone() {
    return new RoomInfo(this);
  }

  /// <summary>Field number for the "roomID" field.</summary>
  public const int RoomIDFieldNumber = 1;
  private int roomID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RoomID {
    get { return roomID_; }
    set {
      roomID_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 2;
  private int time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "playerNum" field.</summary>
  public const int PlayerNumFieldNumber = 3;
  private int playerNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PlayerNum {
    get { return playerNum_; }
    set {
      playerNum_ = value;
    }
  }

  /// <summary>Field number for the "candleNum" field.</summary>
  public const int CandleNumFieldNumber = 4;
  private int candleNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CandleNum {
    get { return candleNum_; }
    set {
      candleNum_ = value;
    }
  }

  /// <summary>Field number for the "woodNum" field.</summary>
  public const int WoodNumFieldNumber = 5;
  private int woodNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WoodNum {
    get { return woodNum_; }
    set {
      woodNum_ = value;
    }
  }

  /// <summary>Field number for the "fogNum" field.</summary>
  public const int FogNumFieldNumber = 6;
  private int fogNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FogNum {
    get { return fogNum_; }
    set {
      fogNum_ = value;
    }
  }

  /// <summary>Field number for the "witchNum" field.</summary>
  public const int WitchNumFieldNumber = 7;
  private int witchNum_;
  /// <summary>
  ///int32 currOperationPlayerNum = 8;	//当前回合出牌玩家序号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WitchNum {
    get { return witchNum_; }
    set {
      witchNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoomID != other.RoomID) return false;
    if (Time != other.Time) return false;
    if (PlayerNum != other.PlayerNum) return false;
    if (CandleNum != other.CandleNum) return false;
    if (WoodNum != other.WoodNum) return false;
    if (FogNum != other.FogNum) return false;
    if (WitchNum != other.WitchNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoomID != 0) hash ^= RoomID.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    if (PlayerNum != 0) hash ^= PlayerNum.GetHashCode();
    if (CandleNum != 0) hash ^= CandleNum.GetHashCode();
    if (WoodNum != 0) hash ^= WoodNum.GetHashCode();
    if (FogNum != 0) hash ^= FogNum.GetHashCode();
    if (WitchNum != 0) hash ^= WitchNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoomID != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(RoomID);
    }
    if (Time != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Time);
    }
    if (PlayerNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PlayerNum);
    }
    if (CandleNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CandleNum);
    }
    if (WoodNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WoodNum);
    }
    if (FogNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FogNum);
    }
    if (WitchNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(WitchNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoomID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomID);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    if (PlayerNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
    }
    if (CandleNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandleNum);
    }
    if (WoodNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WoodNum);
    }
    if (FogNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FogNum);
    }
    if (WitchNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WitchNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomInfo other) {
    if (other == null) {
      return;
    }
    if (other.RoomID != 0) {
      RoomID = other.RoomID;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
    if (other.PlayerNum != 0) {
      PlayerNum = other.PlayerNum;
    }
    if (other.CandleNum != 0) {
      CandleNum = other.CandleNum;
    }
    if (other.WoodNum != 0) {
      WoodNum = other.WoodNum;
    }
    if (other.FogNum != 0) {
      FogNum = other.FogNum;
    }
    if (other.WitchNum != 0) {
      WitchNum = other.WitchNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RoomID = input.ReadInt32();
          break;
        }
        case 16: {
          Time = input.ReadInt32();
          break;
        }
        case 24: {
          PlayerNum = input.ReadInt32();
          break;
        }
        case 32: {
          CandleNum = input.ReadInt32();
          break;
        }
        case 40: {
          WoodNum = input.ReadInt32();
          break;
        }
        case 48: {
          FogNum = input.ReadInt32();
          break;
        }
        case 56: {
          WitchNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class OtherPlayerInfo : pb::IMessage<OtherPlayerInfo> {
  private static readonly pb::MessageParser<OtherPlayerInfo> _parser = new pb::MessageParser<OtherPlayerInfo>(() => new OtherPlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OtherPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherPlayerInfo(OtherPlayerInfo other) : this() {
    name_ = other.name_;
    score_ = other.score_;
    seatNum_ = other.seatNum_;
    cardNum_ = other.cardNum_;
    witchNum_ = other.witchNum_;
    currPlayerStatus_ = other.currPlayerStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OtherPlayerInfo Clone() {
    return new OtherPlayerInfo(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  ///int32 id;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 2;
  private int score_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 3;
  private int seatNum_;
  /// <summary>
  ///座位号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  /// <summary>Field number for the "cardNum" field.</summary>
  public const int CardNumFieldNumber = 4;
  private int cardNum_;
  /// <summary>
  ///持有手牌数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardNum {
    get { return cardNum_; }
    set {
      cardNum_ = value;
    }
  }

  /// <summary>Field number for the "witchNum" field.</summary>
  public const int WitchNumFieldNumber = 5;
  private int witchNum_;
  /// <summary>
  ///持有巫牌数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WitchNum {
    get { return witchNum_; }
    set {
      witchNum_ = value;
    }
  }

  /// <summary>Field number for the "CurrPlayerStatus" field.</summary>
  public const int CurrPlayerStatusFieldNumber = 6;
  private global::OtherPlayerInfo.Types.PlayerStatus currPlayerStatus_ = global::OtherPlayerInfo.Types.PlayerStatus.Normal;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OtherPlayerInfo.Types.PlayerStatus CurrPlayerStatus {
    get { return currPlayerStatus_; }
    set {
      currPlayerStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OtherPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OtherPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Score != other.Score) return false;
    if (SeatNum != other.SeatNum) return false;
    if (CardNum != other.CardNum) return false;
    if (WitchNum != other.WitchNum) return false;
    if (CurrPlayerStatus != other.CurrPlayerStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (CardNum != 0) hash ^= CardNum.GetHashCode();
    if (WitchNum != 0) hash ^= WitchNum.GetHashCode();
    if (CurrPlayerStatus != global::OtherPlayerInfo.Types.PlayerStatus.Normal) hash ^= CurrPlayerStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
    if (SeatNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SeatNum);
    }
    if (CardNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CardNum);
    }
    if (WitchNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WitchNum);
    }
    if (CurrPlayerStatus != global::OtherPlayerInfo.Types.PlayerStatus.Normal) {
      output.WriteRawTag(48);
      output.WriteEnum((int) CurrPlayerStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (CardNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardNum);
    }
    if (WitchNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WitchNum);
    }
    if (CurrPlayerStatus != global::OtherPlayerInfo.Types.PlayerStatus.Normal) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrPlayerStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OtherPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    if (other.CardNum != 0) {
      CardNum = other.CardNum;
    }
    if (other.WitchNum != 0) {
      WitchNum = other.WitchNum;
    }
    if (other.CurrPlayerStatus != global::OtherPlayerInfo.Types.PlayerStatus.Normal) {
      CurrPlayerStatus = other.CurrPlayerStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
        case 24: {
          SeatNum = input.ReadInt32();
          break;
        }
        case 32: {
          CardNum = input.ReadInt32();
          break;
        }
        case 40: {
          WitchNum = input.ReadInt32();
          break;
        }
        case 48: {
          CurrPlayerStatus = (global::OtherPlayerInfo.Types.PlayerStatus) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the OtherPlayerInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PlayerStatus {
      [pbr::OriginalName("Normal")] Normal = 0,
      [pbr::OriginalName("Wood")] Wood = 1,
      [pbr::OriginalName("Fog")] Fog = 2,
    }

  }
  #endregion

}

public sealed partial class LocalPlayerInfo : pb::IMessage<LocalPlayerInfo> {
  private static readonly pb::MessageParser<LocalPlayerInfo> _parser = new pb::MessageParser<LocalPlayerInfo>(() => new LocalPlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LocalPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalPlayerInfo(LocalPlayerInfo other) : this() {
    cardNum_ = other.cardNum_;
    waterNum_ = other.waterNum_;
    fireNum_ = other.fireNum_;
    lightNum_ = other.lightNum_;
    candleNum_ = other.candleNum_;
    woodNum_ = other.woodNum_;
    fogNum_ = other.fogNum_;
    witchNum_ = other.witchNum_;
    currPlayerStatus_ = other.currPlayerStatus_;
    seatNum_ = other.seatNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LocalPlayerInfo Clone() {
    return new LocalPlayerInfo(this);
  }

  /// <summary>Field number for the "cardNum" field.</summary>
  public const int CardNumFieldNumber = 1;
  private int cardNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CardNum {
    get { return cardNum_; }
    set {
      cardNum_ = value;
    }
  }

  /// <summary>Field number for the "waterNum" field.</summary>
  public const int WaterNumFieldNumber = 2;
  private int waterNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WaterNum {
    get { return waterNum_; }
    set {
      waterNum_ = value;
    }
  }

  /// <summary>Field number for the "fireNum" field.</summary>
  public const int FireNumFieldNumber = 3;
  private int fireNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FireNum {
    get { return fireNum_; }
    set {
      fireNum_ = value;
    }
  }

  /// <summary>Field number for the "lightNum" field.</summary>
  public const int LightNumFieldNumber = 4;
  private int lightNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LightNum {
    get { return lightNum_; }
    set {
      lightNum_ = value;
    }
  }

  /// <summary>Field number for the "candleNum" field.</summary>
  public const int CandleNumFieldNumber = 5;
  private int candleNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CandleNum {
    get { return candleNum_; }
    set {
      candleNum_ = value;
    }
  }

  /// <summary>Field number for the "woodNum" field.</summary>
  public const int WoodNumFieldNumber = 6;
  private int woodNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WoodNum {
    get { return woodNum_; }
    set {
      woodNum_ = value;
    }
  }

  /// <summary>Field number for the "fogNum" field.</summary>
  public const int FogNumFieldNumber = 7;
  private int fogNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FogNum {
    get { return fogNum_; }
    set {
      fogNum_ = value;
    }
  }

  /// <summary>Field number for the "witchNum" field.</summary>
  public const int WitchNumFieldNumber = 8;
  private int witchNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WitchNum {
    get { return witchNum_; }
    set {
      witchNum_ = value;
    }
  }

  /// <summary>Field number for the "CurrPlayerStatus" field.</summary>
  public const int CurrPlayerStatusFieldNumber = 9;
  private global::LocalPlayerInfo.Types.PlayerStatus currPlayerStatus_ = global::LocalPlayerInfo.Types.PlayerStatus.Normal;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LocalPlayerInfo.Types.PlayerStatus CurrPlayerStatus {
    get { return currPlayerStatus_; }
    set {
      currPlayerStatus_ = value;
    }
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 10;
  private int seatNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LocalPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LocalPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CardNum != other.CardNum) return false;
    if (WaterNum != other.WaterNum) return false;
    if (FireNum != other.FireNum) return false;
    if (LightNum != other.LightNum) return false;
    if (CandleNum != other.CandleNum) return false;
    if (WoodNum != other.WoodNum) return false;
    if (FogNum != other.FogNum) return false;
    if (WitchNum != other.WitchNum) return false;
    if (CurrPlayerStatus != other.CurrPlayerStatus) return false;
    if (SeatNum != other.SeatNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CardNum != 0) hash ^= CardNum.GetHashCode();
    if (WaterNum != 0) hash ^= WaterNum.GetHashCode();
    if (FireNum != 0) hash ^= FireNum.GetHashCode();
    if (LightNum != 0) hash ^= LightNum.GetHashCode();
    if (CandleNum != 0) hash ^= CandleNum.GetHashCode();
    if (WoodNum != 0) hash ^= WoodNum.GetHashCode();
    if (FogNum != 0) hash ^= FogNum.GetHashCode();
    if (WitchNum != 0) hash ^= WitchNum.GetHashCode();
    if (CurrPlayerStatus != global::LocalPlayerInfo.Types.PlayerStatus.Normal) hash ^= CurrPlayerStatus.GetHashCode();
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CardNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(CardNum);
    }
    if (WaterNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WaterNum);
    }
    if (FireNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FireNum);
    }
    if (LightNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LightNum);
    }
    if (CandleNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CandleNum);
    }
    if (WoodNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(WoodNum);
    }
    if (FogNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(FogNum);
    }
    if (WitchNum != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(WitchNum);
    }
    if (CurrPlayerStatus != global::LocalPlayerInfo.Types.PlayerStatus.Normal) {
      output.WriteRawTag(72);
      output.WriteEnum((int) CurrPlayerStatus);
    }
    if (SeatNum != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(SeatNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CardNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardNum);
    }
    if (WaterNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaterNum);
    }
    if (FireNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireNum);
    }
    if (LightNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LightNum);
    }
    if (CandleNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandleNum);
    }
    if (WoodNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WoodNum);
    }
    if (FogNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FogNum);
    }
    if (WitchNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WitchNum);
    }
    if (CurrPlayerStatus != global::LocalPlayerInfo.Types.PlayerStatus.Normal) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CurrPlayerStatus);
    }
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LocalPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.CardNum != 0) {
      CardNum = other.CardNum;
    }
    if (other.WaterNum != 0) {
      WaterNum = other.WaterNum;
    }
    if (other.FireNum != 0) {
      FireNum = other.FireNum;
    }
    if (other.LightNum != 0) {
      LightNum = other.LightNum;
    }
    if (other.CandleNum != 0) {
      CandleNum = other.CandleNum;
    }
    if (other.WoodNum != 0) {
      WoodNum = other.WoodNum;
    }
    if (other.FogNum != 0) {
      FogNum = other.FogNum;
    }
    if (other.WitchNum != 0) {
      WitchNum = other.WitchNum;
    }
    if (other.CurrPlayerStatus != global::LocalPlayerInfo.Types.PlayerStatus.Normal) {
      CurrPlayerStatus = other.CurrPlayerStatus;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CardNum = input.ReadInt32();
          break;
        }
        case 16: {
          WaterNum = input.ReadInt32();
          break;
        }
        case 24: {
          FireNum = input.ReadInt32();
          break;
        }
        case 32: {
          LightNum = input.ReadInt32();
          break;
        }
        case 40: {
          CandleNum = input.ReadInt32();
          break;
        }
        case 48: {
          WoodNum = input.ReadInt32();
          break;
        }
        case 56: {
          FogNum = input.ReadInt32();
          break;
        }
        case 64: {
          WitchNum = input.ReadInt32();
          break;
        }
        case 72: {
          CurrPlayerStatus = (global::LocalPlayerInfo.Types.PlayerStatus) input.ReadEnum();
          break;
        }
        case 80: {
          SeatNum = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the LocalPlayerInfo message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum PlayerStatus {
      [pbr::OriginalName("Normal")] Normal = 0,
      [pbr::OriginalName("Wood")] Wood = 1,
      [pbr::OriginalName("Fog")] Fog = 2,
    }

  }
  #endregion

}

public sealed partial class GameFinish : pb::IMessage<GameFinish> {
  private static readonly pb::MessageParser<GameFinish> _parser = new pb::MessageParser<GameFinish>(() => new GameFinish());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GameFinish> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameFinish() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameFinish(GameFinish other) : this() {
    seatNum_ = other.seatNum_;
    waterNum_ = other.waterNum_;
    fireNum_ = other.fireNum_;
    lightNum_ = other.lightNum_;
    candleNum_ = other.candleNum_;
    woodNum_ = other.woodNum_;
    fogNum_ = other.fogNum_;
    witchNum_ = other.witchNum_;
    gameScore_ = other.gameScore_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GameFinish Clone() {
    return new GameFinish(this);
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 1;
  private int seatNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  /// <summary>Field number for the "waterNum" field.</summary>
  public const int WaterNumFieldNumber = 2;
  private int waterNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WaterNum {
    get { return waterNum_; }
    set {
      waterNum_ = value;
    }
  }

  /// <summary>Field number for the "fireNum" field.</summary>
  public const int FireNumFieldNumber = 3;
  private int fireNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FireNum {
    get { return fireNum_; }
    set {
      fireNum_ = value;
    }
  }

  /// <summary>Field number for the "lightNum" field.</summary>
  public const int LightNumFieldNumber = 4;
  private int lightNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LightNum {
    get { return lightNum_; }
    set {
      lightNum_ = value;
    }
  }

  /// <summary>Field number for the "candleNum" field.</summary>
  public const int CandleNumFieldNumber = 5;
  private int candleNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CandleNum {
    get { return candleNum_; }
    set {
      candleNum_ = value;
    }
  }

  /// <summary>Field number for the "woodNum" field.</summary>
  public const int WoodNumFieldNumber = 6;
  private int woodNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WoodNum {
    get { return woodNum_; }
    set {
      woodNum_ = value;
    }
  }

  /// <summary>Field number for the "fogNum" field.</summary>
  public const int FogNumFieldNumber = 7;
  private int fogNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FogNum {
    get { return fogNum_; }
    set {
      fogNum_ = value;
    }
  }

  /// <summary>Field number for the "witchNum" field.</summary>
  public const int WitchNumFieldNumber = 8;
  private int witchNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WitchNum {
    get { return witchNum_; }
    set {
      witchNum_ = value;
    }
  }

  /// <summary>Field number for the "gameScore" field.</summary>
  public const int GameScoreFieldNumber = 9;
  private int gameScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GameScore {
    get { return gameScore_; }
    set {
      gameScore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GameFinish);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GameFinish other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatNum != other.SeatNum) return false;
    if (WaterNum != other.WaterNum) return false;
    if (FireNum != other.FireNum) return false;
    if (LightNum != other.LightNum) return false;
    if (CandleNum != other.CandleNum) return false;
    if (WoodNum != other.WoodNum) return false;
    if (FogNum != other.FogNum) return false;
    if (WitchNum != other.WitchNum) return false;
    if (GameScore != other.GameScore) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (WaterNum != 0) hash ^= WaterNum.GetHashCode();
    if (FireNum != 0) hash ^= FireNum.GetHashCode();
    if (LightNum != 0) hash ^= LightNum.GetHashCode();
    if (CandleNum != 0) hash ^= CandleNum.GetHashCode();
    if (WoodNum != 0) hash ^= WoodNum.GetHashCode();
    if (FogNum != 0) hash ^= FogNum.GetHashCode();
    if (WitchNum != 0) hash ^= WitchNum.GetHashCode();
    if (GameScore != 0) hash ^= GameScore.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatNum);
    }
    if (WaterNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(WaterNum);
    }
    if (FireNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FireNum);
    }
    if (LightNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LightNum);
    }
    if (CandleNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(CandleNum);
    }
    if (WoodNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(WoodNum);
    }
    if (FogNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(FogNum);
    }
    if (WitchNum != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(WitchNum);
    }
    if (GameScore != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(GameScore);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (WaterNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaterNum);
    }
    if (FireNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireNum);
    }
    if (LightNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LightNum);
    }
    if (CandleNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandleNum);
    }
    if (WoodNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WoodNum);
    }
    if (FogNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FogNum);
    }
    if (WitchNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WitchNum);
    }
    if (GameScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameScore);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GameFinish other) {
    if (other == null) {
      return;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    if (other.WaterNum != 0) {
      WaterNum = other.WaterNum;
    }
    if (other.FireNum != 0) {
      FireNum = other.FireNum;
    }
    if (other.LightNum != 0) {
      LightNum = other.LightNum;
    }
    if (other.CandleNum != 0) {
      CandleNum = other.CandleNum;
    }
    if (other.WoodNum != 0) {
      WoodNum = other.WoodNum;
    }
    if (other.FogNum != 0) {
      FogNum = other.FogNum;
    }
    if (other.WitchNum != 0) {
      WitchNum = other.WitchNum;
    }
    if (other.GameScore != 0) {
      GameScore = other.GameScore;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SeatNum = input.ReadInt32();
          break;
        }
        case 16: {
          WaterNum = input.ReadInt32();
          break;
        }
        case 24: {
          FireNum = input.ReadInt32();
          break;
        }
        case 32: {
          LightNum = input.ReadInt32();
          break;
        }
        case 40: {
          CandleNum = input.ReadInt32();
          break;
        }
        case 48: {
          WoodNum = input.ReadInt32();
          break;
        }
        case 56: {
          FogNum = input.ReadInt32();
          break;
        }
        case 64: {
          WitchNum = input.ReadInt32();
          break;
        }
        case 72: {
          GameScore = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CandleCardFeedback : pb::IMessage<CandleCardFeedback> {
  private static readonly pb::MessageParser<CandleCardFeedback> _parser = new pb::MessageParser<CandleCardFeedback>(() => new CandleCardFeedback());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CandleCardFeedback> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CandleCardFeedback() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CandleCardFeedback(CandleCardFeedback other) : this() {
    waterNum_ = other.waterNum_;
    fireNum_ = other.fireNum_;
    lightNum_ = other.lightNum_;
    candleNum_ = other.candleNum_;
    woodNum_ = other.woodNum_;
    fogNum_ = other.fogNum_;
    seatNum_ = other.seatNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CandleCardFeedback Clone() {
    return new CandleCardFeedback(this);
  }

  /// <summary>Field number for the "waterNum" field.</summary>
  public const int WaterNumFieldNumber = 1;
  private int waterNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WaterNum {
    get { return waterNum_; }
    set {
      waterNum_ = value;
    }
  }

  /// <summary>Field number for the "fireNum" field.</summary>
  public const int FireNumFieldNumber = 2;
  private int fireNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FireNum {
    get { return fireNum_; }
    set {
      fireNum_ = value;
    }
  }

  /// <summary>Field number for the "lightNum" field.</summary>
  public const int LightNumFieldNumber = 3;
  private int lightNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LightNum {
    get { return lightNum_; }
    set {
      lightNum_ = value;
    }
  }

  /// <summary>Field number for the "candleNum" field.</summary>
  public const int CandleNumFieldNumber = 4;
  private int candleNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CandleNum {
    get { return candleNum_; }
    set {
      candleNum_ = value;
    }
  }

  /// <summary>Field number for the "woodNum" field.</summary>
  public const int WoodNumFieldNumber = 5;
  private int woodNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WoodNum {
    get { return woodNum_; }
    set {
      woodNum_ = value;
    }
  }

  /// <summary>Field number for the "fogNum" field.</summary>
  public const int FogNumFieldNumber = 6;
  private int fogNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FogNum {
    get { return fogNum_; }
    set {
      fogNum_ = value;
    }
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 7;
  private int seatNum_;
  /// <summary>
  ///int32 witchNum = 7;
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CandleCardFeedback);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CandleCardFeedback other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (WaterNum != other.WaterNum) return false;
    if (FireNum != other.FireNum) return false;
    if (LightNum != other.LightNum) return false;
    if (CandleNum != other.CandleNum) return false;
    if (WoodNum != other.WoodNum) return false;
    if (FogNum != other.FogNum) return false;
    if (SeatNum != other.SeatNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (WaterNum != 0) hash ^= WaterNum.GetHashCode();
    if (FireNum != 0) hash ^= FireNum.GetHashCode();
    if (LightNum != 0) hash ^= LightNum.GetHashCode();
    if (CandleNum != 0) hash ^= CandleNum.GetHashCode();
    if (WoodNum != 0) hash ^= WoodNum.GetHashCode();
    if (FogNum != 0) hash ^= FogNum.GetHashCode();
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (WaterNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(WaterNum);
    }
    if (FireNum != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FireNum);
    }
    if (LightNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(LightNum);
    }
    if (CandleNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CandleNum);
    }
    if (WoodNum != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WoodNum);
    }
    if (FogNum != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(FogNum);
    }
    if (SeatNum != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(SeatNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (WaterNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaterNum);
    }
    if (FireNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FireNum);
    }
    if (LightNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LightNum);
    }
    if (CandleNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandleNum);
    }
    if (WoodNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WoodNum);
    }
    if (FogNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FogNum);
    }
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CandleCardFeedback other) {
    if (other == null) {
      return;
    }
    if (other.WaterNum != 0) {
      WaterNum = other.WaterNum;
    }
    if (other.FireNum != 0) {
      FireNum = other.FireNum;
    }
    if (other.LightNum != 0) {
      LightNum = other.LightNum;
    }
    if (other.CandleNum != 0) {
      CandleNum = other.CandleNum;
    }
    if (other.WoodNum != 0) {
      WoodNum = other.WoodNum;
    }
    if (other.FogNum != 0) {
      FogNum = other.FogNum;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          WaterNum = input.ReadInt32();
          break;
        }
        case 16: {
          FireNum = input.ReadInt32();
          break;
        }
        case 24: {
          LightNum = input.ReadInt32();
          break;
        }
        case 32: {
          CandleNum = input.ReadInt32();
          break;
        }
        case 40: {
          WoodNum = input.ReadInt32();
          break;
        }
        case 48: {
          FogNum = input.ReadInt32();
          break;
        }
        case 56: {
          SeatNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///协议11，掉线
///协议12，重连，掉线玩家的房间玩家信息全都收到发送
/// </summary>
public sealed partial class OffLineOrOnLine : pb::IMessage<OffLineOrOnLine> {
  private static readonly pb::MessageParser<OffLineOrOnLine> _parser = new pb::MessageParser<OffLineOrOnLine>(() => new OffLineOrOnLine());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OffLineOrOnLine> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoomPackageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OffLineOrOnLine() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OffLineOrOnLine(OffLineOrOnLine other) : this() {
    seatNum_ = other.seatNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OffLineOrOnLine Clone() {
    return new OffLineOrOnLine(this);
  }

  /// <summary>Field number for the "seatNum" field.</summary>
  public const int SeatNumFieldNumber = 1;
  private int seatNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SeatNum {
    get { return seatNum_; }
    set {
      seatNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OffLineOrOnLine);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OffLineOrOnLine other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SeatNum != other.SeatNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SeatNum != 0) hash ^= SeatNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SeatNum != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SeatNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SeatNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeatNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OffLineOrOnLine other) {
    if (other == null) {
      return;
    }
    if (other.SeatNum != 0) {
      SeatNum = other.SeatNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SeatNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
